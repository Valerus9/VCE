name: Build Matrix

on:
  pull_request:
  push:

jobs:
  # linux-build:
  #   strategy:
  #     matrix:
  #       config: [Debug]
  #       os: [ubuntu-latest]

  #   name: Ubuntu with ${{ matrix.compiler }} (${{ matrix.config }})
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 0

  #   - name: "Install"
  #     uses: awalsh128/cache-apt-pkgs-action@v1.3.1
  #     with:
  #       packages: git build-essential clang cmake libgl1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libicu-dev
  #       version: 1.0

  #   - name: Set environment
  #     run: |
  #       echo "CC=${{ matrix.compiler == 'gcc' && 'gcc' || 'clang-15' }}" >> $GITHUB_ENV
  #       echo "CXX=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++-15' }}" >> $GITHUB_ENV

  #   - name: Configure Build Files
  #     run: |
  #       cmake -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DARCHITECTURE=x64 -B build

  #   - name: Build Kat's PA Engine
  #     run: |
  #       cmake --build build --parallel -t VicCEngine

  #   - name: Archive results
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: katerina-engine-ubuntu-x86_64
  #       path: build/VicCEngine

  windows-x64-build:
    strategy:
      matrix:
        config: [x64-release-windows]
    runs-on: [windows-latest]
    name: Windows (${{ matrix.config }})
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Configure Build Files
      run: |
        cmake --preset=${{ matrix.config }} -DCMAKE_BUILD_TYPE=Release -DARCHITECTURE=x64 -G "Visual Studio 17 2022" -A x64 -B build
        cmake --build build --parallel -t VicCEngine --config Release

    - name: Archive results
      uses: actions/upload-artifact@v4
      with:
        name: katerina-engine-windows-x64
        path: build/Release/VicCEngine.exe

  windows-x86-build:
    strategy:
      matrix:
        config: [x86-release-windows]
    runs-on: [windows-latest]
    name: Windows (${{ matrix.config }})
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Configure Build Files
      run: |
        cmake --preset=${{ matrix.config }} -DCMAKE_BUILD_TYPE=Release -DARCHITECTURE=x86 -G "Visual Studio 17 2022" -A Win32 -B build
        cmake --build build --parallel -t VicCEngine --config Release

    - name: Archive results
      uses: actions/upload-artifact@v4
      with:
        name: katerina-engine-windows-x86
        path: build/Release/VicCEngine.exe

  # macos-build:
  #   strategy:
  #     matrix:
  #       config: [Debug]
  #   runs-on: [macos-latest]
  #   name: MacOS (${{ matrix.config }})
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 0

  #   - name: Install ICU
  #     run: |
  #       brew install icu4c

  #   - name: Configure Build Files
  #     run: |
  #       cmake -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DARCHITECTURE=aarch64 -DCMAKE_PREFIX_PATH=/opt/homebrew/opt/icu4c -B build

  #   - name: Build Kat's PA Engine
  #     run: |
  #       cmake --build build --parallel -t VicCEngine

  #   - name: Archive results
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: katerina-engine-macos-aarch64
  #       path: build/VicCEngine

  # build-check:
  #   needs: [windows-build, linux-build, macos-build]
  #   runs-on: ubuntu-latest
  #   name: Build Matrix
  #   steps:
  #     - name: Check
  #       run: |
  #         echo success

  build-check:
    needs: [windows-x64-build, windows-x86-build]
    runs-on: ubuntu-latest
    name: Build Matrix
    steps:
      - name: Check
        run: |
          echo success

