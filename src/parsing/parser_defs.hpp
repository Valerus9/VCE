#include "parsers.hpp"

namespace parsers {
template<typename C>
national_identity_file parse_national_identity_file(token_generator& gen, error_handler& err, C&& context) {
	national_identity_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 12:
					// dynamic_tags
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D616E7964) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x73676174))) {
						/* discarded */
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				default:
					cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
color_from_3f parse_color_from_3f(token_generator& gen, error_handler& err, C&& context) {
	color_from_3f cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_float(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
religion_def parse_religion_def(token_generator& gen, error_handler& err, C&& context) {
	religion_def cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// color
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F6C6F63) && (cur.content[4] | 0x20 ) == 0x72)) {
						cobj.color(parse_color_from_3f(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// icon
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6369))) {
						cobj.icon(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 5:
					// pagan
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x61676170) && (cur.content[4] | 0x20 ) == 0x6E)) {
						cobj.pagan(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
religion_group parse_religion_group(token_generator& gen, error_handler& err, C&& context) {
	religion_group cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_religion(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
religion_file parse_religion_file(token_generator& gen, error_handler& err, C&& context) {
	religion_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_group(cur.content, parse_religion_group(gen, err, context), err, cur.line, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
color_from_3i parse_color_from_3i(token_generator& gen, error_handler& err, C&& context) {
	color_from_3i cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_int(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
names_list parse_names_list(token_generator& gen, error_handler& err, C&& context) {
	names_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_text(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
culture parse_culture(token_generator& gen, error_handler& err, C&& context) {
	culture cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// color
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F6C6F63) && (cur.content[4] | 0x20 ) == 0x72)) {
						cobj.color(parse_color_from_3i(gen, err, context), err, cur.line, context);
					} else {
						make_culture(cur.content, gen, err, context);
					}
					break;
				case 10:
					// last_names
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D616E7F7473616C) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7365)) {
						make_ln_list(gen, err, context);
					} else {
						make_culture(cur.content, gen, err, context);
					}
					break;
				case 11:
					// first_names
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x616E7F7473726966) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x656D && (cur.content[10] | 0x20 ) == 0x73)) {
						make_fn_list(gen, err, context);
					} else {
						make_culture(cur.content, gen, err, context);
					}
					break;
				default:
					make_culture(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 7:
					// primary
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6D697270) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7261 && (cur.content[6] | 0x20 ) == 0x79)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// radicalism
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C616369646172) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6D73)) {
						cobj.radicalism(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
culture_group parse_culture_group(token_generator& gen, error_handler& err, C&& context) {
	culture_group cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_culture(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// unit
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x74696E75))) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 5:
					// union
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F696E75) && (cur.content[4] | 0x20 ) == 0x6E)) {
						cobj.union_tag(assoc_type, parse_tag(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					// leader
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6461656C) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7265)) {
						cobj.leader(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 11:
					// is_overseas
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737265766F7F7369) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6165 && (cur.content[10] | 0x20 ) == 0x73)) {
						cobj.is_overseas(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
culture_file parse_culture_file(token_generator& gen, error_handler& err, C&& context) {
	culture_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_culture_group(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
good parse_good(token_generator& gen, error_handler& err, C&& context) {
	good cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// color
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F6C6F63) && (cur.content[4] | 0x20 ) == 0x72)) {
						cobj.color(parse_color_from_3i(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// cost
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x74736F63))) {
						cobj.cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 5:
					// money
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x656E6F6D) && (cur.content[4] | 0x20 ) == 0x79)) {
						cobj.money(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 9:
					// tradeable
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C62616564617274) && (cur.content[8] | 0x20 ) == 0x65)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 16:
					// overseas_penalty
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736165737265766F) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79746C616E65707F))) {
						cobj.overseas_penalty(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 20:
					// available_from_start
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C62616C69617661) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6D6F72667F65) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x74726174))) {
						cobj.available_from_start(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
goods_group parse_goods_group(token_generator& gen, error_handler& err, C&& context) {
	goods_group cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_good(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
goods_file parse_goods_file(token_generator& gen, error_handler& err, C&& context) {
	goods_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_goods_group(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
modifier_base parse_modifier_base(token_generator& gen, error_handler& err, C&& context) {
	modifier_base cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// icon
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6369))) {
						cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746F767F726F6F))) {
							cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
							cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69737265766E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x61727F6E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
int_vector parse_int_vector(token_generator& gen, error_handler& err, C&& context) {
	int_vector cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_int(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
commodity_array parse_commodity_array(token_generator& gen, error_handler& err, C&& context) {
	commodity_array cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
building_definition parse_building_definition(token_generator& gen, error_handler& err, C&& context) {
	building_definition cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 10:
					// goods_cost
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F73646F6F67) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7473)) {
						cobj.goods_cost = parse_commodity_array(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 15:
					// colonial_points
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61696E6F6C6F63) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x696F707F) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x746E && (cur.content[14] | 0x20 ) == 0x73)) {
						cobj.colonial_points = parse_int_vector(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// cost
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x736F && (cur.content[3] | 0x20 ) == 0x74)) {
							cobj.cost = parse_int(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// icon
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6F63 && (cur.content[3] | 0x20 ) == 0x6E)) {
							cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// port
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x726F && (cur.content[3] | 0x20 ) == 0x74)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// sail
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6961 && (cur.content[3] | 0x20 ) == 0x6C)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// time
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x656D)) {
								cobj.time = parse_int(rh_token.content, rh_token.line, err);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x79:
							// type
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x6570)) {
								cobj.type = parse_text(rh_token.content, rh_token.line, err);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 5:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6F:
						// onmap
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x70616D6E))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// steam
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6D616574))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// capital
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74697061) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6C61)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// PR
						// running -  R
						if((true && (cur.content[1] | 0x20 ) == 0x72)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x65:
								// prestige
								if((true && (*(uint32_t const*)(&cur.content[3]) | uint32_t(0x20202020) ) == uint32_t(0x67697473) && (cur.content[7] | 0x20 ) == 0x65)) {
									cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6F:
								// province
								if((true && (*(uint32_t const*)(&cur.content[3]) | uint32_t(0x20202020) ) == uint32_t(0x636E6976) && (cur.content[7] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// max_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6576656C7F7861))) {
							cobj.max_level = parse_int(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746F767F726F6F))) {
							cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// fort_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6576656C7F74726F) && (cur.content[9] | 0x20 ) == 0x6C)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x76:
						// visibility
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C6962697369) && (cur.content[9] | 0x20 ) == 0x79)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
							cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6F:
						// ON
						// running -  N
						if((true && (cur.content[1] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x65:
								// one_per_state
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174737F7265707F) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6574)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7F:
								// on_completion
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974656C706D6F63) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E6F)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// colonial_range
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x676E6172) && (cur.content[13] | 0x20 ) == 0x65)) {
							cobj.colonial_range = parse_int(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_push
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x68737570))) {
								cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6E:
							// infrastructure
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6375727473617266) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65727574))) {
								cobj.infrastructure = parse_float(rh_token.content, rh_token.line, err);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// naval_capacity
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7061637F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74696361) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.naval_capacity = parse_int(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// CO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// completion_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974656C70) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x657A6973))) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// conversion_rate
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6973726576) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
									cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x64:
						// default_enabled
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F746C75616665) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C62616E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6465)) {
							cobj.default_enabled = parse_bool(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// poor_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F726F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x72:
							// production_type
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69746375646F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x7079747F) && (cur.content[14] | 0x20 ) == 0x65)) {
								cobj.production_type = parse_text(rh_token.content, rh_token.line, err);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// AD
						// running -  D
						if((true && (cur.content[1] | 0x20 ) == 0x64)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// admin_efficiency
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F6E69) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[15] | 0x20 ) == 0x79)) {
									cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x76:
								// advanced_factory
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61667F6465636E61) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x726F7463) && (cur.content[15] | 0x20 ) == 0x79)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								switch(0x20 | int32_t(cur.content[3])) {
								case 0x75:
									// population_growth
									if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x677F6E6F6974616C) && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x74776F72) && (cur.content[16] | 0x20 ) == 0x68)) {
										cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7F:
									// pop_build_factory
									if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61667F646C697562) && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x726F7463) && (cur.content[16] | 0x20 ) == 0x79)) {
										/* discarded */
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// strategic_factory
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6369676574617274) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79726F746361667F))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// soldier_to_pop_loss
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F747F726569646C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F6C7F706F707F) && (cur.content[18] | 0x20 ) == 0x73)) {
								cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x70:
							// spawn_railway_track
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6961727F6E7761) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636172747F796177) && (cur.content[18] | 0x20 ) == 0x6B)) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
building_file parse_building_file(token_generator& gen, error_handler& err, C&& context) {
	building_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.result(cur.content, parse_building_definition(gen, err, context), err, cur.line, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
ideology_group parse_ideology_group(token_generator& gen, error_handler& err, C&& context) {
	ideology_group cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					register_ideology(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
ideology_file parse_ideology_file(token_generator& gen, error_handler& err, C&& context) {
	ideology_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_ideology_group(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
issue parse_issue(token_generator& gen, error_handler& err, C&& context) {
	issue cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					register_option(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// administrative
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727473696E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x76697461) && (cur.content[13] | 0x20 ) == 0x65)) {
							cobj.administrative(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// next_step_only
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706574737F747865) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C6E6F7F) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.next_step_only(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
issues_group parse_issues_group(token_generator& gen, error_handler& err, C&& context) {
	issues_group cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_issue(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
issues_file parse_issues_file(token_generator& gen, error_handler& err, C&& context) {
	issues_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_issues_group(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
government_type parse_government_type(token_generator& gen, error_handler& err, C&& context) {
	government_type cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// duration
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74617275) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6F69 && (cur.content[7] | 0x20 ) == 0x6E)) {
							cobj.duration(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x65:
						// election
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7463656C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6F69 && (cur.content[7] | 0x20 ) == 0x6E)) {
							cobj.election(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						// flagtype
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7467616C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7079 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.flagtype = parse_text(rh_token.content, rh_token.line, err);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 20:
					// appoint_ruling_party
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E696F707061) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F676E696C7572) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
						cobj.appoint_ruling_party(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				default:
					cobj.any_value(cur.content, assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
governments_file parse_governments_file(token_generator& gen, error_handler& err, C&& context) {
	governments_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_government(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
cb_list parse_cb_list(token_generator& gen, error_handler& err, C&& context) {
	cb_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_text(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
cb_types_file parse_cb_types_file(token_generator& gen, error_handler& err, C&& context) {
	cb_types_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 11:
					// peace_order
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726F7F6563616570) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6564 && (cur.content[10] | 0x20 ) == 0x72)) {
						cobj.peace_order = parse_cb_list(gen, err, context);
					} else {
						register_cb_type(cur.content, gen, err, context);
					}
					break;
				default:
					register_cb_type(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
trait parse_trait(token_generator& gen, error_handler& err, C&& context) {
	trait cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// speed
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65657073) && (cur.content[4] | 0x20 ) == 0x64)) {
						cobj.speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.morale(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					// DEFEN
					// running -  DEFEN
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65666564) && (cur.content[4] | 0x20 ) == 0x6E)) {
						switch(0x20 | int32_t(cur.content[5])) {
						case 0x63:
							// defence
							if((true && (cur.content[6] | 0x20 ) == 0x65)) {
								cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x73:
							// defense
							if((true && (cur.content[6] | 0x20 ) == 0x65)) {
								cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
					} else {
						err.unhandled_association_key(cur);
						}
					break;
				case 9:
					// attrition
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69746972747461) && (cur.content[8] | 0x20 ) == 0x6E)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// experience
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6563)) {
						cobj.experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 11:
					// reliability
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C696261696C6572) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7469 && (cur.content[10] | 0x20 ) == 0x79)) {
						cobj.reliability(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 12:
					// organisation
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6173696E6167726F) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6974))) {
						cobj.organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 14:
					// reconnaissance
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616E6E6F636572) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6E617373) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x6563)) {
						cobj.reconnaissance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
traits_set parse_traits_set(token_generator& gen, error_handler& err, C&& context) {
	traits_set cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_trait(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
traits_file parse_traits_file(token_generator& gen, error_handler& err, C&& context) {
	traits_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 10:
					// background
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F72676B636162) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x646E)) {
						background_traits_set(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 11:
					// personality
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C616E6F73726570) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7469 && (cur.content[10] | 0x20 ) == 0x79)) {
						personality_traits_set(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
crimes_file parse_crimes_file(token_generator& gen, error_handler& err, C&& context) {
	crimes_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					register_crime(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
triggered_modifier parse_triggered_modifier(token_generator& gen, error_handler& err, C&& context) {
	triggered_modifier cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 7:
					// trigger
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67697274) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6567 && (cur.content[6] | 0x20 ) == 0x72)) {
						register_trigger(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// icon
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6369))) {
						cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746F767F726F6F))) {
							cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
							cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69737265766E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x61727F6E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
triggered_modifiers_file parse_triggered_modifiers_file(token_generator& gen, error_handler& err, C&& context) {
	triggered_modifiers_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_triggered_modifier(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
national_values_file parse_national_values_file(token_generator& gen, error_handler& err, C&& context) {
	national_values_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_national_value(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
static_modifiers_file parse_static_modifiers_file(token_generator& gen, error_handler& err, C&& context) {
	static_modifiers_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 3:
					// war
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6177 && (cur.content[2] | 0x20 ) == 0x72)) {
						m_war(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 4:
					// core
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65726F63))) {
						m_core(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 5:
					// peace
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x63616570) && (cur.content[4] | 0x20 ) == 0x65)) {
						m_peace(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 6:
					// badboy
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x62646162) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x796F)) {
						m_badboy(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// coastal
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7473616F) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6C61)) {
							m_coastal(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x65:
						// easy_ai
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F797361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6961)) {
							m_easy_ai(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x68:
						// hard_ai
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F647261) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6961)) {
							m_hard_ai(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6F:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x63:
							// occupied
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x69707563) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x6465)) {
								m_occupied(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x76:
							// overseas
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x65737265) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7361)) {
								m_overseas(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
						break;
					case 0x73:
						// sea_zone
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7A7F6165) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6E6F && (cur.content[7] | 0x20 ) == 0x65)) {
							m_sea_zone(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// blockaded
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646564616B636F6C))) {
							m_blockaded(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x64:
						// disarming
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E696D72617369))) {
							m_disarming(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x68:
						// has_siege
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65676569737F7361))) {
							m_has_siege(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x70:
						// plurality
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7974696C6172756C))) {
							m_plurality(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// bad_debter
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746265647F6461) && (cur.content[9] | 0x20 ) == 0x72)) {
							m_bad_debter(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x63:
						// civ_nation
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616E7F7669) && (cur.content[9] | 0x20 ) == 0x6E)) {
							m_civ_nation(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// base_values
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756C61767F657361) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7365)) {
							m_base_values(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x63:
						// coastal_sea
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6C617473616F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6165)) {
							m_coastal_sea(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x65:
						// easy_player
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79616C707F797361) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7265)) {
							m_easy_player(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x67:
						// great_power
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x776F707F74616572) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7265)) {
							m_great_power(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x68:
						// hard_player
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79616C707F647261) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7265)) {
							m_hard_player(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6E:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// nationalism
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73696C616E6F6974) && (cur.content[10] | 0x20 ) == 0x6D)) {
								m_nationalism(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x6F:
							// non_coastal
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617473616F637F6E) && (cur.content[10] | 0x20 ) == 0x6C)) {
								m_non_coastal(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// in_bankrupcy
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75726B6E61627F6E) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6370 && (cur.content[11] | 0x20 ) == 0x79)) {
							m_in_bankrupcy(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x73:
						// second_power
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F646E6F6365) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6577 && (cur.content[11] | 0x20 ) == 0x72)) {
							m_second_power(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x75:
						// unciv_nation
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616E7F7669636E) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6F69 && (cur.content[11] | 0x20 ) == 0x6E)) {
							m_unciv_nation(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x76:
						// VERY_
						// running -  ERY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F797265))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x65:
								// very_easy_ai
								if((true && (*(uint32_t const*)(&cur.content[6]) | uint32_t(0x20202020) ) == uint32_t(0x7F797361) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6961)) {
									m_very_easy_ai(gen, err, context);
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							case 0x68:
								// very_hard_ai
								if((true && (*(uint32_t const*)(&cur.content[6]) | uint32_t(0x20202020) ) == uint32_t(0x7F647261) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6961)) {
									m_very_hard_ai(gen, err, context);
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							default:
								err.unhandled_group_key(cur); gen.discard_group();
								break;
							}
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
							}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 13:
					// land_province
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F646E616C) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x636E6976) && (cur.content[12] | 0x20 ) == 0x65)) {
						m_land_province(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// infrastructure
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757274736172666E) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x72757463) && (cur.content[13] | 0x20 ) == 0x65)) {
							m_infrastructure(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							m_war_exhaustion(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// debt_default_to
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x616665647F746265) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7F746C75) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6F74)) {
							m_debt_default_to(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x74:
						// total_blockaded
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C627F6C61746F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x64616B63) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6465)) {
							m_total_blockaded(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// average_literacy
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F656761726576) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x72657469) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6361 && (cur.content[15] | 0x20 ) == 0x79)) {
							m_average_literacy(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x74:
						// total_occupation
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63636F7F6C61746F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74617075) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6F69 && (cur.content[15] | 0x20 ) == 0x6E)) {
							m_total_occupation(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x76:
						// VERY_
						// running -  ERY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F797265))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x65:
								// very_easy_player
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79616C707F797361) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7265)) {
									m_very_easy_player(gen, err, context);
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							case 0x68:
								// very_hard_player
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79616C707F647261) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7265)) {
									m_very_hard_player(gen, err, context);
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							default:
								err.unhandled_group_key(cur); gen.discard_group();
								break;
							}
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
							}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 22:
					// no_adjacent_controlled
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63616A64617F6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E6F637F746E65) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x6C6C6F72) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x6465)) {
						m_no_adjacent_controlled(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 24:
					// generalised_debt_default
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C6172656E6567) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746265647F646573) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746C75616665647F))) {
						m_generalised_debt_default(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
event_modifiers_file parse_event_modifiers_file(token_generator& gen, error_handler& err, C&& context) {
	event_modifiers_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_event_modifier(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
rebel_types_file parse_rebel_types_file(token_generator& gen, error_handler& err, C&& context) {
	rebel_types_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					register_rebel_type(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
sea_list parse_sea_list(token_generator& gen, error_handler& err, C&& context) {
	sea_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_int(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
default_map_file parse_default_map_file(token_generator& gen, error_handler& err, C&& context) {
	default_map_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 10:
					// sea_starts
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174737F616573) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7374)) {
						cobj.sea_starts = parse_sea_list(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 14:
					// border_heights
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x687F726564726F62) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x68676965) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x7374)) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 21:
					// terrain_sheet_heights
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E696172726574) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65687F7465656873) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x74686769) && (cur.content[20] | 0x20 ) == 0x73)) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// tree
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65657274))) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					// R
					// running -  R
					if((true && (cur.content[0] | 0x20 ) == 0x72)) {
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// region
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6967))) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// rivers
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x73726576))) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
					} else {
						err.unhandled_association_key(cur);
						}
					break;
				case 7:
					// terrain
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x72726574) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6961 && (cur.content[6] | 0x20 ) == 0x6E)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// continent
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E69746E6F))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// positions
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x69746973) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x6E6F && (cur.content[8] | 0x20 ) == 0x73)) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x72:
							// provinces
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E69766F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x6563 && (cur.content[8] | 0x20 ) == 0x73)) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					// region_sea
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6E6F69676572) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6165)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// adjacencies
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E6563616A64) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7365)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// definitions
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974696E696665) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x736E)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// border_cutoff
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75637F726564726F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x66666F74))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// max_provinces
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69766F72707F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7365636E))) {
							cobj.max_provinces(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					// tree_definition
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F65657274) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696E69) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x6F69 && (cur.content[14] | 0x20 ) == 0x6E)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 18:
					// terrain_definition
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E696172726574) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974696E69666564) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6E6F)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 20:
					// province_flag_sprite
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E69766F7270) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x70737F67616C667F) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x65746972))) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
terrain_modifier parse_terrain_modifier(token_generator& gen, error_handler& err, C&& context) {
	terrain_modifier cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// color
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F6C6F63) && (cur.content[4] | 0x20 ) == 0x72)) {
						cobj.color = parse_color_from_3i(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// icon
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6F63 && (cur.content[3] | 0x20 ) == 0x6E)) {
							cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tree
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6572 && (cur.content[3] | 0x20 ) == 0x65)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// is_water
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61777F73) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6574 && (cur.content[7] | 0x20 ) == 0x72)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746F767F726F6F))) {
							cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x74:
						// tree_density
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736E65647F656572) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7469 && (cur.content[11] | 0x20 ) == 0x79)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
							cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69737265766E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x61727F6E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
terrain_modifiers_list parse_terrain_modifiers_list(token_generator& gen, error_handler& err, C&& context) {
	terrain_modifiers_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_terrain_modifier(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
select_an_int parse_select_an_int(token_generator& gen, error_handler& err, C&& context) {
	select_an_int cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value= parse_int(cur.content, cur.line, err);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
palette_definition parse_palette_definition(token_generator& gen, error_handler& err, C&& context) {
	palette_definition cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// color
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F6C6F63) && (cur.content[4] | 0x20 ) == 0x72)) {
						cobj.color = parse_select_an_int(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// type
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65707974))) {
						cobj.type = parse_text(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// priority
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x797469726F697270))) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 11:
					// has_texture
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747865747F736168) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7275 && (cur.content[10] | 0x20 ) == 0x65)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
terrain_file parse_terrain_file(token_generator& gen, error_handler& err, C&& context) {
	terrain_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 10:
					// categories
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69726F6765746163) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7365)) {
						cobj.categories = parse_terrain_modifiers_list(gen, err, context);
					} else {
						cobj.any_group = parse_palette_definition(gen, err, context);
					}
					break;
				default:
					cobj.any_group = parse_palette_definition(gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 7:
					// terrain
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x72726574) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6961 && (cur.content[6] | 0x20 ) == 0x6E)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
state_definition parse_state_definition(token_generator& gen, error_handler& err, C&& context) {
	state_definition cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_int(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
region_file parse_region_file(token_generator& gen, error_handler& err, C&& context) {
	region_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_state_definition(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
continent_provinces parse_continent_provinces(token_generator& gen, error_handler& err, C&& context) {
	continent_provinces cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_int(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
continent_definition parse_continent_definition(token_generator& gen, error_handler& err, C&& context) {
	continent_definition cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 9:
					// provinces
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E69766F7270) && (cur.content[8] | 0x20 ) == 0x73)) {
						cobj.provinces = parse_continent_provinces(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// icon
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6369))) {
						cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746F767F726F6F))) {
							cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
							cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69737265766E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x61727F6E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_int(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
continent_file parse_continent_file(token_generator& gen, error_handler& err, C&& context) {
	continent_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_continent_definition(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
climate_definition parse_climate_definition(token_generator& gen, error_handler& err, C&& context) {
	climate_definition cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// icon
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6369))) {
						cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746F767F726F6F))) {
							cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
							cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69737265766E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x61727F6E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_int(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
climate_file parse_climate_file(token_generator& gen, error_handler& err, C&& context) {
	climate_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_climate_definition(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
tech_folder_list parse_tech_folder_list(token_generator& gen, error_handler& err, C&& context) {
	tech_folder_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_text(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
tech_groups_list parse_tech_groups_list(token_generator& gen, error_handler& err, C&& context) {
	tech_groups_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_tech_folder_list(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
tech_schools_list parse_tech_schools_list(token_generator& gen, error_handler& err, C&& context) {
	tech_schools_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					read_school_modifier(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
technology_main_file parse_technology_main_file(token_generator& gen, error_handler& err, C&& context) {
	technology_main_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// folders
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x65646C6F) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7372)) {
							cobj.folders = parse_tech_groups_list(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x73:
						// schools
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F6F6863) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x736C)) {
							cobj.schools = parse_tech_schools_list(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
technology_sub_file parse_technology_sub_file(token_generator& gen, error_handler& err, C&& context) {
	technology_sub_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					register_technology(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
inventions_file parse_inventions_file(token_generator& gen, error_handler& err, C&& context) {
	inventions_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					register_invention(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
commodity_set parse_commodity_set(token_generator& gen, error_handler& err, C&& context) {
	commodity_set cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
unit_definition parse_unit_definition(token_generator& gen, error_handler& err, C&& context) {
	unit_definition cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 10:
					// build_cost
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F646C697562) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7473)) {
						cobj.build_cost = parse_commodity_set(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 11:
					// supply_cost
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796C70707573) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x736F && (cur.content[10] | 0x20 ) == 0x74)) {
						cobj.supply_cost = parse_commodity_set(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x68:
						// hull
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6C75 && (cur.content[3] | 0x20 ) == 0x6C)) {
							cobj.defence_or_hull = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// icon
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6F63 && (cur.content[3] | 0x20 ) == 0x6E)) {
							cobj.icon = parse_int(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// sail
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6961 && (cur.content[3] | 0x20 ) == 0x6C)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// type
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7079 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.type_text(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 5:
					// siege
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67656973) && (cur.content[4] | 0x20 ) == 0x65)) {
						cobj.siege_or_torpedo_attack = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x63:
							// active
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x65766974))) {
								cobj.active = parse_bool(rh_token.content, rh_token.line, err);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x74:
							// attack
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6B636174))) {
								cobj.attack_or_gun_power = parse_float(rh_token.content, rh_token.line, err);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// sprite
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74697270) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.sprite(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// capital
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74697061) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6C61)) {
							cobj.capital = parse_bool(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence_or_hull = parse_float(rh_token.content, rh_token.line, err);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence_or_hull = parse_float(rh_token.content, rh_token.line, err);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x65:
						// evasion
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x69736176) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6E6F)) {
							cobj.discipline_or_evasion = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// support
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7472)) {
							cobj.support = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						// maneuver
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x75656E61) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6576 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.maneuver = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// priority
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x726F6972) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7469 && (cur.content[7] | 0x20 ) == 0x79)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// gun_power
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265776F707F6E75))) {
							cobj.attack_or_gun_power = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// transport
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F70736E6172))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// unit_type
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657079747F74696E))) {
							cobj.unit_type_text(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// build_time
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D69747F646C6975) && (cur.content[9] | 0x20 ) == 0x65)) {
							cobj.build_time = parse_int(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// discipline
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E696C7069637369) && (cur.content[9] | 0x20 ) == 0x65)) {
							cobj.discipline_or_evasion = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// fire_range
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E61727F657269) && (cur.content[9] | 0x20 ) == 0x65)) {
							cobj.reconnaissance_or_fire_range = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// move_sound
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E756F737F65766F) && (cur.content[9] | 0x20 ) == 0x64)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// naval_icon
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F63697F6C617661) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.naval_icon = parse_int(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						// max_strength
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E657274737F7861) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7467 && (cur.content[11] | 0x20 ) == 0x68)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// select_sound
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F737F7463656C) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x646E)) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x70:
							// sprite_mount
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F6D7F65746972) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x746E)) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// floating_flag
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F676E6974616F6C) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x67616C66))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// maximum_speed
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6D756D697861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
							cobj.maximum_speed = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6C:
						// limit_per_port
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265707F74696D69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x726F707F) && (cur.content[13] | 0x20 ) == 0x74)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// min_port_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726F707F6E69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[13] | 0x20 ) == 0x6C)) {
							cobj.min_port_level = parse_int(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// reconnaissance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369616E6E6F6365) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6173) && (cur.content[13] | 0x20 ) == 0x65)) {
							cobj.reconnaissance_or_fire_range = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// torpedo_attack
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617F6F646570726F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[13] | 0x20 ) == 0x6B)) {
							cobj.siege_or_torpedo_attack = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// weighted_value
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F64657468676965) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x756C6176) && (cur.content[13] | 0x20 ) == 0x65)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6E696F70) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7374)) {
							cobj.colonial_points = parse_int(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// primary_culture
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F7972616D6972) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75746C75) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6572)) {
							cobj.primary_culture = parse_bool(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// sprite_override
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x766F7F6574697270) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69727265) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6564)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// can_build_overseas
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E61) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6165737265766F7F) && (cur.content[17] | 0x20 ) == 0x73)) {
							cobj.can_build_overseas = parse_bool(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					// default_organisation
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746C7561666564) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6173696E6167726F) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6974))) {
						cobj.default_organisation = parse_int(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 24:
					// S
					// running -  S
					if((true && (cur.content[0] | 0x20 ) == 0x73)) {
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x70:
							// sprite_mount_attach_node
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F6D7F65746972) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F746E) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6F6E7F68) && (*(uint16_t const*)(&cur.content[22]) | 0x2020 ) == 0x6564)) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// supply_consumption_score
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F637F796C7070) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F6974706D7573) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6F63737F) && (*(uint16_t const*)(&cur.content[22]) | 0x2020 ) == 0x6572)) {
								cobj.supply_consumption_score = parse_int(rh_token.content, rh_token.line, err);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
					} else {
						err.unhandled_association_key(cur);
						}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
unit_file parse_unit_file(token_generator& gen, error_handler& err, C&& context) {
	unit_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_unit(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
unit_names_list parse_unit_names_list(token_generator& gen, error_handler& err, C&& context) {
	unit_names_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_text(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
unit_names_collection parse_unit_names_collection(token_generator& gen, error_handler& err, C&& context) {
	unit_names_collection cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_unit_names_list(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
party parse_party(token_generator& gen, error_handler& err, C&& context) {
	party cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 7:
					// trigger
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67697274) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6567 && (cur.content[6] | 0x20 ) == 0x72)) {
						cobj.trigger = make_party_trigger(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// name
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x656D616E))) {
						cobj.name(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// end_date
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x647F646E) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7461 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.end_date(assoc_type, parse_date(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						// ideology
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C6F6564) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x676F && (cur.content[7] | 0x20 ) == 0x79)) {
							cobj.ideology(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 10:
					// start_date
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61647F7472617473) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6574)) {
						cobj.start_date(assoc_type, parse_date(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				default:
					cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
country_file parse_country_file(token_generator& gen, error_handler& err, C&& context) {
	country_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// color
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x726F6C6F))) {
							cobj.color(parse_color_from_3i(gen, err, context), err, cur.line, context);
						} else {
							cobj.any_group(cur.content, parse_color_from_3i(gen, err, context), err, cur.line, context);
						}
						break;
					case 0x70:
						// party
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							make_party(gen, err, context);
						} else {
							cobj.any_group(cur.content, parse_color_from_3i(gen, err, context), err, cur.line, context);
						}
						break;
					default:
						cobj.any_group(cur.content, parse_color_from_3i(gen, err, context), err, cur.line, context);
						break;
					}
					break;
				case 10:
					// unit_names
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D616E7F74696E75) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7365)) {
						cobj.unit_names = parse_unit_names_collection(gen, err, context);
					} else {
						cobj.any_group(cur.content, parse_color_from_3i(gen, err, context), err, cur.line, context);
					}
					break;
				default:
					cobj.any_group(cur.content, parse_color_from_3i(gen, err, context), err, cur.line, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 8:
					// template
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6574616C706D6574))) {
						cobj.template_(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 17:
					// graphical_culture
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6163696870617267) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7275746C75637F6C) && (cur.content[16] | 0x20 ) == 0x65)) {
						cobj.graphical_culture(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
pv_party_loyalty parse_pv_party_loyalty(token_generator& gen, error_handler& err, C&& context) {
	pv_party_loyalty cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 8:
					// ideology
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79676F6C6F656469))) {
						cobj.ideology(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 13:
					// loyalty_value
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79746C61796F6C) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x756C6176) && (cur.content[12] | 0x20 ) == 0x65)) {
						cobj.loyalty_value = parse_int(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
pv_state_building parse_pv_state_building(token_generator& gen, error_handler& err, C&& context) {
	pv_state_building cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// level
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[4] | 0x20 ) == 0x6C)) {
						cobj.level = parse_int(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 7:
					// upgrade
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x72677075) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6461 && (cur.content[6] | 0x20 ) == 0x65)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// building
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646C697562))) {
						cobj.building(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
province_rgo_ext_desc parse_province_rgo_ext_desc(token_generator& gen, error_handler& err, C&& context) {
	province_rgo_ext_desc cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 10:
					// trade_good
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F677F6564617274) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x646F)) {
						cobj.trade_good(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 14:
					// max_employment
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C706D657F78616D) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x656D796F) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x746E)) {
						cobj.max_employment(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
province_rgo_ext parse_province_rgo_ext(token_generator& gen, error_handler& err, C&& context) {
	province_rgo_ext cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// entry
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x72746E65) && (cur.content[4] | 0x20 ) == 0x79)) {
						cobj.entry(parse_province_rgo_ext_desc(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
province_history_file parse_province_history_file(token_generator& gen, error_handler& err, C&& context) {
	province_history_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 6:
					// revolt
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F766572) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x746C)) {
						gen.discard_group();
					} else {
						enter_dated_block(cur.content, gen, err, context);
					}
					break;
				case 13:
					// party_loyalty
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F7974726170) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x746C6179) && (cur.content[12] | 0x20 ) == 0x79)) {
						cobj.party_loyalty(parse_pv_party_loyalty(gen, err, context), err, cur.line, context);
					} else {
						enter_dated_block(cur.content, gen, err, context);
					}
					break;
				case 14:
					// state_building
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75627F6574617473) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x69646C69) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x676E)) {
						cobj.state_building(parse_pv_state_building(gen, err, context), err, cur.line, context);
					} else {
						enter_dated_block(cur.content, gen, err, context);
					}
					break;
				case 16:
					// rgo_distribution
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747369647F6F6772) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697475626972))) {
						cobj.rgo_distribution(parse_province_rgo_ext(gen, err, context), err, cur.line, context);
					} else {
						enter_dated_block(cur.content, gen, err, context);
					}
					break;
				default:
					enter_dated_block(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// owner
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x656E776F) && (cur.content[4] | 0x20 ) == 0x72)) {
						cobj.owner(assoc_type, parse_tag(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colony
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6C6F) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.colony(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// revolt
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C6F7665) && (cur.content[5] | 0x20 ) == 0x74)) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 7:
					// terrain
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x72726574) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6961 && (cur.content[6] | 0x20 ) == 0x6E)) {
						cobj.terrain(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// add_core
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x637F6464) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x726F && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.add_core(assoc_type, parse_tag(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x63:
						// colonial
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6C6F) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6169 && (cur.content[7] | 0x20 ) == 0x6C)) {
							cobj.colony(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						// is_slave
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C737F73) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7661 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.is_slave(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 10:
					// controller
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6C6F72746E6F63) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7265)) {
						cobj.controller(assoc_type, parse_tag(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// remove_core
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F65766F6D65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6572)) {
							cobj.remove_core(assoc_type, parse_tag(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x74:
						// trade_goods
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6F677F65646172) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7364)) {
							cobj.trade_goods(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// clr_province_flag
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69766F72707F726C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67616C667F65636E))) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// set_province_flag
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69766F72707F7465) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67616C667F65636E))) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				default:
					cobj.any_value(cur.content, assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
pop_history_definition parse_pop_history_definition(token_generator& gen, error_handler& err, C&& context) {
	pop_history_definition cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// size
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x657A6973))) {
						cobj.size = parse_int(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 7:
					// culture
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x746C7563) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7275 && (cur.content[6] | 0x20 ) == 0x65)) {
						cobj.culture(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// religion
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F6967696C6572))) {
						cobj.religion(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 9:
					// militancy
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E6174696C696D) && (cur.content[8] | 0x20 ) == 0x79)) {
						cobj.militancy = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// rebel_type
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747F6C65626572) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6570)) {
						cobj.rebel_type(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
pop_province_list parse_pop_province_list(token_generator& gen, error_handler& err, C&& context) {
	pop_province_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_group(cur.content, parse_pop_history_definition(gen, err, context), err, cur.line, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
pop_history_file parse_pop_history_file(token_generator& gen, error_handler& err, C&& context) {
	pop_history_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_pop_province_list(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
value_modifier_definition parse_value_modifier_definition(token_generator& gen, error_handler& err, C&& context) {
	value_modifier_definition cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// group
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x756F7267) && (cur.content[4] | 0x20 ) == 0x70)) {
						cobj.group(parse_value_modifier_definition(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 8:
					// modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
						make_value_modifier_segment(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// base
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7361 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.base = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// days
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7961 && (cur.content[3] | 0x20 ) == 0x73)) {
							cobj.factor = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x79:
						// year
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6165 && (cur.content[3] | 0x20 ) == 0x72)) {
							cobj.years(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 5:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						// month
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x68746E6F))) {
							cobj.months(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x79:
						// years
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x73726165))) {
							cobj.years(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factor
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (cur.content[5] | 0x20 ) == 0x72)) {
							cobj.factor = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// months
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x68746E6F) && (cur.content[5] | 0x20 ) == 0x73)) {
							cobj.months(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
promotion_targets parse_promotion_targets(token_generator& gen, error_handler& err, C&& context) {
	promotion_targets cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					read_promotion_target(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
pop_ideologies parse_pop_ideologies(token_generator& gen, error_handler& err, C&& context) {
	pop_ideologies cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					read_pop_ideology(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
pop_issues parse_pop_issues(token_generator& gen, error_handler& err, C&& context) {
	pop_issues cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					read_pop_issue(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
income parse_income(token_generator& gen, error_handler& err, C&& context) {
	income cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// type
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65707974))) {
						cobj.type(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					// weight
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67696577) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7468)) {
						cobj.weight = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
poptype_file parse_poptype_file(token_generator& gen, error_handler& err, C&& context) {
	poptype_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// color
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x726F6C6F))) {
							cobj.color(parse_color_from_3i(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x72:
						// rebel
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C656265))) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 6:
					// issues
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x75737369) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7365)) {
						cobj.issues = parse_pop_issues(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// ideologies
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6569676F6C6F6564) && (cur.content[9] | 0x20 ) == 0x73)) {
							cobj.ideologies = parse_pop_ideologies(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6C:
						// life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6465656E7F656669) && (cur.content[9] | 0x20 ) == 0x73)) {
							cobj.life_needs(stub_commodity_array(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x70:
						// promote_to
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F65746F6D6F72) && (cur.content[9] | 0x20 ) == 0x6F)) {
							cobj.promote_to = parse_promotion_targets(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 12:
					// luxury_needs
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E7F79727578756C) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x73646565))) {
						cobj.luxury_needs(stub_commodity_array(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 14:
					// everyday_needs
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7961647972657665) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x7364)) {
						cobj.everyday_needs(stub_commodity_array(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 16:
					// migration_target
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7465677261747F6E))) {
						read_migration_target(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 17:
					// life_needs_income
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F6566696C) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F7364) && (cur.content[16] | 0x20 ) == 0x65)) {
						cobj.life_needs_income(parse_income(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 19:
					// luxury_needs_income
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E7F79727578756C) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E697F73646565) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6D6F && (cur.content[18] | 0x20 ) == 0x65)) {
						cobj.luxury_needs_income(parse_income(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 21:
					// everyday_needs_income
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7961647972657665) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F736465656E7F) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x6D6F636E) && (cur.content[20] | 0x20 ) == 0x65)) {
						cobj.everyday_needs_income(parse_income(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 24:
					// country_migration_target
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972746E756F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7465677261747F6E))) {
						read_c_migration_target(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 6:
					// S
					// running -  S
					if((true && (cur.content[0] | 0x20 ) == 0x73)) {
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x70:
							// sprite
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x65746972))) {
								cobj.sprite(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x74:
							// strata
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61746172))) {
								cobj.strata(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
					} else {
						err.unhandled_association_key(cur);
						}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// is_slave
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C737F73) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7661 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.is_slave(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// max_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					// can_build
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F6E6163) && (cur.content[8] | 0x20 ) == 0x64)) {
						cobj.can_build(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// equivalent
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E656C6176697571) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.equivalent(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// is_artisan
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6173697472617F73) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.is_artisan(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					// unemployment
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x796F6C706D656E75) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
						cobj.unemployment(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 13:
					// starter_share
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F72657472617473) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x72616873) && (cur.content[12] | 0x20 ) == 0x65)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// demote_migrant
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696D7F65746F6D65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6E617267) && (cur.content[13] | 0x20 ) == 0x74)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// merge_max_size
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78616D7F65677265) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7A69737F) && (cur.content[13] | 0x20 ) == 0x65)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// allowed_to_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6465776F6C6C) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F767F6F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.allowed_to_vote(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// research_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6E696F70) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7374)) {
							cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// workplace_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6563616C706B726F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.workplace_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// CAN_
						// running -  AN_
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E61 && (cur.content[3] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[4])) {
							case 0x62:
								// can_be_recruited
								if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6975726365727F65) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574 && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.can_be_recruited(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x77:
								// can_work_factory
								if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361667F6B726F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x726F && (cur.content[15] | 0x20 ) == 0x79)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// research_optimum
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6974706F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x756D && (cur.content[15] | 0x20 ) == 0x6D)) {
							cobj.research_optimum(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// workplace_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6563616C706B726F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74756F7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7570 && (cur.content[15] | 0x20 ) == 0x74)) {
							cobj.workplace_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					// state_capital_only
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6574617473) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F7F6C61746970) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x796C)) {
						cobj.state_capital_only(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 24:
					// can_reduce_consciousness
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756465727F6E6163) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F6563) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69))) {
						cobj.can_reduce_consciousness(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
individual_ideology parse_individual_ideology(token_generator& gen, error_handler& err, C&& context) {
	individual_ideology cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// color
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F6C6F63) && (cur.content[4] | 0x20 ) == 0x72)) {
						cobj.color(parse_color_from_3i(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 17:
					// add_social_reform
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636F737F646461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726F6665727F6C61) && (cur.content[16] | 0x20 ) == 0x6D)) {
						cobj.add_social_reform(ideology_condition(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 19:
					// ADD_
					// running -  ADD_
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x7F646461))) {
						switch(0x20 | int32_t(cur.content[4])) {
						case 0x65:
							// add_economic_reform
							if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F666572) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6D72)) {
								cobj.add_economic_reform(ideology_condition(gen, err, context), err, cur.line, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x6D:
							// add_military_reform
							if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F666572) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6D72)) {
								cobj.add_military_reform(ideology_condition(gen, err, context), err, cur.line, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
						}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// add_political_reform
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C6F707F6464) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665727F6C616369) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x726F && (cur.content[19] | 0x20 ) == 0x6D)) {
							cobj.add_political_reform(ideology_condition(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x72:
						// remove_social_reform
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F737F65766F6D65) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665727F6C616963) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x726F && (cur.content[19] | 0x20 ) == 0x6D)) {
							cobj.remove_social_reform(ideology_condition(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 23:
					// remove_political_reform
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F65766F6D6572) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x6665727F) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x726F && (cur.content[22] | 0x20 ) == 0x6D)) {
						cobj.remove_political_reform(ideology_condition(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// date
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65746164))) {
						cobj.date(assoc_type, parse_date(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 9:
					// civilized
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657A696C69766963) && (cur.content[8] | 0x20 ) == 0x64)) {
						cobj.civilized(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 11:
					// uncivilized
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C697669636E75) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x657A && (cur.content[10] | 0x20 ) == 0x64)) {
						cobj.uncivilized(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 20:
					// can_reduce_militancy
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756465727F6E6163) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F6563) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x79636E61))) {
						cobj.can_reduce_militancy(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
cb_body parse_cb_body(token_generator& gen, error_handler& err, C&& context) {
	cb_body cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 6:
					// on_add
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x617F6E6F) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6464)) {
						cobj.on_add(cb_on_add(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 7:
					// can_use
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x7F6E6163) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7375 && (cur.content[6] | 0x20 ) == 0x65)) {
						cobj.can_use(cb_can_use(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 8:
					// is_valid
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64696C61767F7369))) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// allowed_states
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6465776F6C6C) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65746174) && (cur.content[13] | 0x20 ) == 0x73)) {
							cobj.allowed_states(cb_allowed_states(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6F:
						// on_po_accepted
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6363617F6F707F6E) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65747065) && (cur.content[13] | 0x20 ) == 0x64)) {
							cobj.on_po_accepted(cb_on_po_accepted(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 17:
					// allowed_countries
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6465776F6C6C61) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656972746E756F63) && (cur.content[16] | 0x20 ) == 0x73)) {
						cobj.allowed_countries(cb_allowed_countries(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 24:
					// ALLOWED_S
					// running -  ALLOWED_S
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6465776F6C6C61) && (cur.content[8] | 0x20 ) == 0x73)) {
						switch(0x20 | int32_t(cur.content[9])) {
						case 0x74:
							// allowed_states_in_crisis
							if((true && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E697F73657461) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x73697263) && (*(uint16_t const*)(&cur.content[22]) | 0x2020 ) == 0x7369)) {
								cobj.allowed_states_in_crisis(cb_allowed_crisis_states(gen, err, context), err, cur.line, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x75:
							// allowed_substate_regions
							if((true && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657461747362) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6F696765) && (*(uint16_t const*)(&cur.content[22]) | 0x2020 ) == 0x736E)) {
								cobj.allowed_substate_regions(cb_allowed_substates(gen, err, context), err, cur.line, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
						}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// always
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7961776C) && (cur.content[5] | 0x20 ) == 0x73)) {
							cobj.always(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// crisis
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x69736972) && (cur.content[5] | 0x20 ) == 0x73)) {
							cobj.crisis(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// months
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7368746E))) {
								cobj.months(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// mutual
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6C617574))) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x70:
						// po_annex
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E617F6F) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656E && (cur.content[7] | 0x20 ) == 0x78)) {
							cobj.po_annex(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// war_name
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E7F7261) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6D61 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.war_name(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					// po_colony
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F6C6F637F6F70) && (cur.content[8] | 0x20 ) == 0x79)) {
						cobj.po_colony(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// po_gunboat
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F626E75677F6F70) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7461)) {
						cobj.po_gunboat(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// is_civil_war
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C697669637F73) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6177 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.is_civil_war(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// sprite_index
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F6574697270) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6564 && (cur.content[11] | 0x20 ) == 0x78)) {
							cobj.sprite_index(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// truce_months
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F6D7F65637572) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6874 && (cur.content[11] | 0x20 ) == 0x73)) {
							cobj.truce_months(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// badboy_factor
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61667F796F626461) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x726F7463))) {
							cobj.badboy_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// po_status_quo
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7375746174737F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F75717F))) {
							cobj.po_status_quo(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					// P
					// running -  P
					if((true && (cur.content[0] | 0x20 ) == 0x70)) {
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// penalty_factor
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61667F79746C616E) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x726F7463))) {
								cobj.penalty_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// PO_
							// running -  _
							if((true && (cur.content[2] | 0x20 ) == 0x7F)) {
								switch(0x20 | int32_t(cur.content[3])) {
								case 0x64:
									// po_disarmament
									if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D616D72617369) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x746E)) {
										cobj.po_disarmament(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x6D:
									// po_make_puppet
									if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707075707F656B61) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x7465)) {
										cobj.po_make_puppet(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// po_reparations
									if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69746172617065) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x736E)) {
										cobj.po_reparations(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
					} else {
						err.unhandled_association_key(cur);
						}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// constructing_cb
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7463757274736E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7F676E69) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6263)) {
							cobj.constructing_cb(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// PO_
							// running -  _
							if((true && (cur.content[2] | 0x20 ) == 0x7F)) {
								switch(0x20 | int32_t(cur.content[3])) {
								case 0x64:
									// po_demand_state
									if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74737F646E616D65) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x7461 && (cur.content[14] | 0x20 ) == 0x65)) {
										cobj.po_demand_state(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// po_remove_cores
									if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F65766F6D65) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x6572 && (cur.content[14] | 0x20 ) == 0x73)) {
										cobj.po_remove_cores(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x72:
							// prestige_factor
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x667F656769747365) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (cur.content[14] | 0x20 ) == 0x72)) {
								cobj.prestige_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					// PO_
					// running -  PO_
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6F70 && (cur.content[2] | 0x20 ) == 0x7F)) {
						switch(0x20 | int32_t(cur.content[3])) {
						case 0x61:
							// po_add_to_sphere
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x70737F6F747F6464) && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x65726568))) {
								cobj.po_add_to_sphere(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x64:
							// po_destroy_forts
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x667F796F72747365) && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x7374726F))) {
								cobj.po_destroy_forts(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
					} else {
						err.unhandled_association_key(cur);
						}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// is_triggered_only
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6567676972747F73) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x796C6E6F7F646572))) {
							cobj.is_triggered_only(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// peace_cost_factor
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F656361) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6361667F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6F74 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.peace_cost_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// po_release_puppet
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657361656C65727F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x7075707F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6570 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.po_release_puppet(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tws_battle_factor
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C747461627F7377) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726F746361667F65))) {
							cobj.tws_battle_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// all_allowed_states
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x776F6C6C617F6C6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746174737F6465) && (cur.content[17] | 0x20 ) == 0x73)) {
							cobj.all_allowed_states(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// construction_speed
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7463757274736E6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (cur.content[17] | 0x20 ) == 0x64)) {
							cobj.construction_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// po_remove_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65766F6D65727F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.po_remove_prestige(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					// great_war_obligatory
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61777F7461657267) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167696C626F7F72) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x79726F74))) {
						cobj.great_war_obligatory(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 21:
					// PO_
					// running -  PO_
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6F70 && (cur.content[2] | 0x20 ) == 0x7F)) {
						switch(0x20 | int32_t(cur.content[3])) {
						case 0x63:
							// po_clear_union_sphere
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F7261656C) && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72656870737F6E6F) && (cur.content[20] | 0x20 ) == 0x65)) {
								cobj.po_clear_union_sphere(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x74:
							// po_transfer_provinces
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F726566736E6172) && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E69766F7270) && (cur.content[20] | 0x20 ) == 0x73)) {
								cobj.po_transfer_provinces(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
					} else {
						err.unhandled_association_key(cur);
						}
					break;
				case 22:
					// po_destroy_naval_bases
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72747365647F6F70) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6176616E7F796F) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x7361627F) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7365)) {
						cobj.po_destroy_naval_bases(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 25:
					// break_truce_infamy_factor
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72747F6B61657262) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61666E697F656375) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F746361667F796D) && (cur.content[24] | 0x20 ) == 0x72)) {
						cobj.break_truce_infamy_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// break_truce_prestige_factor
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7572747F6B616572) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736572707F6563) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361667F656769) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x726F)) {
							cobj.break_truce_prestige_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// good_relation_infamy_factor
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x616C65727F646F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666E697F6E6F6974) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361667F796D61) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x726F)) {
							cobj.good_relation_infamy_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 28:
					// break_truce_militancy_factor
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72747F6B61657262) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C696D7F656375) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61667F79636E6174) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x726F7463))) {
						cobj.break_truce_militancy_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// good_relation_prestige_factor
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x616C65727F646F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6572707F6E6F6974) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61667F6567697473) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x726F7463))) {
							cobj.good_relation_prestige_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// po_install_communist_gov_type
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6174736E697F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E756D6D6F637F6C) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F766F677F747369) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x65707974))) {
							cobj.po_install_communist_gov_type(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 30:
					// good_relation_militancy_factor
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C65727F646F6F67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696D7F6E6F697461) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79636E6174696C) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x74636166) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x726F)) {
						cobj.good_relation_militancy_factor(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 31:
					// po_uninstall_communist_gov_type
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736E696E757F6F70) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F637F6C6C6174) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x677F7473696E756D) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x747F766F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7079 && (cur.content[30] | 0x20 ) == 0x65)) {
						cobj.po_uninstall_communist_gov_type(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
crime_modifier parse_crime_modifier(token_generator& gen, error_handler& err, C&& context) {
	crime_modifier cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 7:
					// trigger
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67697274) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6567 && (cur.content[6] | 0x20 ) == 0x72)) {
						cobj.trigger = make_crime_trigger(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// icon
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6369))) {
						cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x63:
							// active
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x65766974))) {
								cobj.active = parse_bool(rh_token.content, rh_token.line, err);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x74:
							// attack
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6B636174))) {
								cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746F767F726F6F))) {
							cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
							cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69737265766E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x61727F6E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
option_rules parse_option_rules(token_generator& gen, error_handler& err, C&& context) {
	option_rules cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// dhont
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6864) && (cur.content[4] | 0x20 ) == 0x74)) {
						cobj.dhont(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 9:
					// rich_only
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6E6F7F68636972) && (cur.content[8] | 0x20 ) == 0x79)) {
						cobj.rich_only(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// all_voting
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69746F767F6C6C) && (cur.content[9] | 0x20 ) == 0x67)) {
							cobj.all_voting(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x62:
						// build_bank
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E61627F646C6975) && (cur.content[9] | 0x20 ) == 0x6B)) {
							cobj.build_bank(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// state_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746F767F65746174) && (cur.content[9] | 0x20 ) == 0x65)) {
							cobj.state_vote(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6F:
						// open_factory
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361667F6E6570) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x726F && (cur.content[11] | 0x20 ) == 0x79)) {
							cobj.open_factory(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// sainte_laque
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x616C7F65746E6961) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7571 && (cur.content[11] | 0x20 ) == 0x65)) {
							cobj.sainte_laque(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// BUILD_
						// running -  UILD_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x646C6975) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x66:
								// build_factory
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972)) {
									cobj.build_factory(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// build_railway
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x776C6961) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7961)) {
									cobj.build_railway(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x63:
						// can_subsidise
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69736275737F6E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65736964))) {
							cobj.can_subsidise(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// largest_share
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F747365677261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65726168))) {
							cobj.largest_share(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// culture_voting
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x767F657275746C75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6E69746F) && (cur.content[13] | 0x20 ) == 0x67)) {
							cobj.culture_voting(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// expand_factory
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61667F646E617078) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x726F7463) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.expand_factory(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// destroy_factory
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x667F796F72747365) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7972)) {
							cobj.destroy_factory(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// population_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F767F6E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.population_vote(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// slavery_allowed
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617F79726576616C) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x776F6C6C) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6465)) {
							cobj.slavery_allowed(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// build_university
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F646C6975) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x73726576) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7469 && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.build_university(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// factory_priority
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x726F6972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7469 && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.factory_priority(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_open_factory
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E65706F7F706F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636166) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x726F && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.pop_open_factory(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 17:
					// pop_build_factory
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706F70) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726F746361667F64) && (cur.content[16] | 0x20 ) == 0x79)) {
						cobj.pop_build_factory(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 18:
					// pop_expand_factory
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617078657F706F70) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F746361667F646E) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x7972)) {
						cobj.pop_expand_factory(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 19:
					// open_factory_invest
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361667F6E65706F) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x766E697F79726F74) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x7365 && (cur.content[18] | 0x20 ) == 0x74)) {
						cobj.open_factory_invest(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// BUILD_
						// running -  UILD_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x646C6975) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x66:
								// build_factory_invest
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7365766E) && (cur.content[19] | 0x20 ) == 0x74)) {
									cobj.build_factory_invest(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// build_railway_invest
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F7961776C6961) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7365766E) && (cur.content[19] | 0x20 ) == 0x74)) {
									cobj.build_railway_invest(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x73:
						// same_as_ruling_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F73617F656D61) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61707F676E696C75) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7472 && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.same_as_ruling_party(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 21:
					// expand_factory_invest
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x667F646E61707865) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x7365766E) && (cur.content[20] | 0x20 ) == 0x74)) {
						cobj.expand_factory_invest(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 22:
					// primary_culture_voting
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972616D697270) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F657275746C7563) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x69746F76) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x676E)) {
						cobj.primary_culture_voting(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 23:
					// pop_open_factory_invest
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65706F7F706F70) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79726F746361667F) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x766E697F) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7365 && (cur.content[22] | 0x20 ) == 0x74)) {
						cobj.pop_open_factory_invest(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// allow_foreign_investment
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726F667F776F6C6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x766E697F6E676965) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6D747365) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6E65 && (cur.content[23] | 0x20 ) == 0x74)) {
							cobj.allow_foreign_investment(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_build_factory_invest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79726F746361667F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x766E697F) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x7365 && (cur.content[23] | 0x20 ) == 0x74)) {
							cobj.pop_build_factory_invest(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 25:
					// pop_expand_factory_invest
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617078657F706F70) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F746361667F646E) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F7972) && (cur.content[24] | 0x20 ) == 0x74)) {
						cobj.pop_expand_factory_invest(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// can_invest_in_pop_projects
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6E61) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F6E697F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7463656A6F72707F) && (cur.content[25] | 0x20 ) == 0x73)) {
							cobj.can_invest_in_pop_projects(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// delete_factory_if_no_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61667F6574656C65) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66697F79726F7463) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706E697F6F6E7F) && (cur.content[25] | 0x20 ) == 0x74)) {
							cobj.delete_factory_if_no_input(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
on_execute_body parse_on_execute_body(token_generator& gen, error_handler& err, C&& context) {
	on_execute_body cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 6:
					// effect
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65666665) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7463)) {
						cobj.effect = make_execute_effect(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 7:
					// trigger
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67697274) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6567 && (cur.content[6] | 0x20 ) == 0x72)) {
						cobj.trigger = make_execute_trigger(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
vote_modifiers_body parse_vote_modifiers_body(token_generator& gen, error_handler& err, C&& context) {
	vote_modifiers_body cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_issue_vote_modifier(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
issue_option_body parse_issue_option_body(token_generator& gen, error_handler& err, C&& context) {
	issue_option_body cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// allow
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x776F6C6C))) {
							make_opt_allow(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x72:
						// rules
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x73656C75))) {
							cobj.rules = parse_option_rules(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 10:
					// on_execute
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75636578657F6E6F) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6574)) {
						cobj.on_execute(parse_on_execute_body(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 14:
					// vote_modifiers
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F65746F76) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x7372)) {
						cobj.vote_modifiers(parse_vote_modifiers_body(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// icon
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6369))) {
						cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746F767F726F6F))) {
							cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x73:
							// is_jingoism
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73696F676E696A7F) && (cur.content[10] | 0x20 ) == 0x6D)) {
								cobj.is_jingoism(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
							cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69737265766E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x61727F6E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// technology_cost
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676F6C6F6E686365) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F637F79) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7473)) {
							cobj.technology_cost(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x77:
						// war_exhaustion_effect
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6E6F697473) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x74636566))) {
							cobj.war_exhaustion_effect(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 25:
					// ADMINISTRATIVE_
					// running -  ADMINISTRATIVE_
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x69746172) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x6576 && (cur.content[14] | 0x20 ) == 0x7F)) {
						switch(0x20 | int32_t(cur.content[15])) {
						case 0x65:
							// administrative_efficiency
							if((true && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
								cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6D:
							// administrative_multiplier
							if((true && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696C7069746C75) && (cur.content[24] | 0x20 ) == 0x72)) {
								cobj.administrative_multiplier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
					} else {
						err.unhandled_association_key(cur);
						}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
national_focus parse_national_focus(token_generator& gen, error_handler& err, C&& context) {
	national_focus cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// limit
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x696D696C) && (cur.content[4] | 0x20 ) == 0x74)) {
						cobj.limit(make_focus_limit(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// icon
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6369))) {
						cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						// ideology
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C6F6564) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x676F && (cur.content[7] | 0x20 ) == 0x79)) {
							cobj.ideology(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// poor_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746F767F726F6F))) {
							cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// railroads
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6F726C69) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x6461 && (cur.content[8] | 0x20 ) == 0x73)) {
								cobj.railroads(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
							cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// LO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x61:
								// loan_interest
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657265746E697F6E) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7473)) {
									cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x79:
								// loyalty_value
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61767F79746C61) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6575)) {
									cobj.loyalty_value(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6F:
						// own_provinces
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69766F72707F6E77) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7365636E))) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x68:
						// has_flashpoint
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6873616C667F7361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6E696F70) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.has_flashpoint(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69737265766E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x61727F6E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// FACTORY_
							// running -  CTORY_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x726F7463) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7F79)) {
								switch(0x20 | int32_t(cur.content[8])) {
								case 0x6F:
									// factory_owner_cost
									if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
										cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x74:
									// factory_throughput
									if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
										cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						case 0x6C:
							// flashpoint_tension
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F70687361) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69736E65747F))) {
								cobj.flashpoint_tension(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									default:
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										break;
									}
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									default:
										cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										break;
									}
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6F:
						// outliner_show_as_percent
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F72656E696C7475) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F73617F776F6873) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x63726570) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6E65 && (cur.content[23] | 0x20 ) == 0x74)) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
focus_group parse_focus_group(token_generator& gen, error_handler& err, C&& context) {
	focus_group cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_focus(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
national_focus_file parse_national_focus_file(token_generator& gen, error_handler& err, C&& context) {
	national_focus_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_focus_group(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
main_pop_type_file parse_main_pop_type_file(token_generator& gen, error_handler& err, C&& context) {
	main_pop_type_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 15:
					// demotion_chance
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69746F6D6564) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6168637F) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x636E && (cur.content[14] | 0x20 ) == 0x65)) {
						cobj.demotion_chance(make_poptype_pop_chance(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						// migration_chance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6168637F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x65)) {
							cobj.migration_chance(make_poptype_pop_chance(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x70:
						// promotion_chance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69746F6D6F72) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6168637F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x65)) {
							cobj.promotion_chance(make_poptype_pop_chance(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// conversion_chance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69737265766E6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6168637F6E))) {
							cobj.conversion_chance(make_poptype_pop_chance(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x65:
						// emigration_chance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6168637F6E))) {
							cobj.emigration_chance(make_poptype_pop_chance(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 19:
					// assimilation_chance
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x616C696D69737361) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6168637F6E6F6974) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x636E && (cur.content[18] | 0x20 ) == 0x65)) {
						cobj.assimilation_chance(make_poptype_pop_chance(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 24:
					// colonialmigration_chance
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61696E6F6C6F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6168637F6E))) {
						cobj.colonialmigration_chance(make_poptype_pop_chance(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
unit_modifier_body parse_unit_modifier_body(token_generator& gen, error_handler& err, C&& context) {
	unit_modifier_body cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// hull
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6C6C7568))) {
						cobj.defence_or_hull = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 5:
					// siege
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67656973) && (cur.content[4] | 0x20 ) == 0x65)) {
						cobj.siege_or_torpedo_attack = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					// attack
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x61747461) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6B63)) {
						cobj.attack_or_gun_power = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence_or_hull = parse_float(rh_token.content, rh_token.line, err);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence_or_hull = parse_float(rh_token.content, rh_token.line, err);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x65:
						// evasion
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x69736176) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6E6F)) {
							cobj.discipline_or_evasion = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// support
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7472)) {
							cobj.support = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					// maneuver
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72657675656E616D))) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 9:
					// gun_power
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65776F707F6E7567) && (cur.content[8] | 0x20 ) == 0x72)) {
						cobj.attack_or_gun_power = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// build_time
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D69747F646C6975) && (cur.content[9] | 0x20 ) == 0x65)) {
							cobj.build_time = parse_int(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// discipline
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E696C7069637369) && (cur.content[9] | 0x20 ) == 0x65)) {
							cobj.discipline_or_evasion = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// fire_range
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E61727F657269) && (cur.content[9] | 0x20 ) == 0x65)) {
							cobj.reconnaissance_or_fire_range = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					// maximum_speed
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D756D6978616D) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65657073) && (cur.content[12] | 0x20 ) == 0x64)) {
						cobj.maximum_speed = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x72:
						// reconnaissance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369616E6E6F6365) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6173) && (cur.content[13] | 0x20 ) == 0x65)) {
							cobj.reconnaissance_or_fire_range = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// torpedo_attack
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617F6F646570726F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[13] | 0x20 ) == 0x6B)) {
							cobj.siege_or_torpedo_attack = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					// supply_consumption
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796C70707573) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974706D75736E6F) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6E6F)) {
						cobj.supply_consumption = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 20:
					// default_organisation
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746C7561666564) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6173696E6167726F) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6974))) {
						cobj.default_organisation = parse_int(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
tech_rgo_goods_output parse_tech_rgo_goods_output(token_generator& gen, error_handler& err, C&& context) {
	tech_rgo_goods_output cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
tech_fac_goods_output parse_tech_fac_goods_output(token_generator& gen, error_handler& err, C&& context) {
	tech_fac_goods_output cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
tech_rgo_size parse_tech_rgo_size(token_generator& gen, error_handler& err, C&& context) {
	tech_rgo_size cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
technology_contents parse_technology_contents(token_generator& gen, error_handler& err, C&& context) {
	technology_contents cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 8:
					// rgo_size
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657A69737F6F6772))) {
						cobj.rgo_size = parse_tech_rgo_size(gen, err, context);
					} else {
						cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
					}
					break;
				case 9:
					// ai_chance
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E6168637F6961) && (cur.content[8] | 0x20 ) == 0x65)) {
						cobj.ai_chance(make_ai_chance(gen, err, context), err, cur.line, context);
					} else {
						cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
					}
					break;
				case 16:
					// rgo_goods_output
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6F677F6F6772) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74757074756F7F73))) {
						cobj.rgo_goods_output = parse_tech_rgo_goods_output(gen, err, context);
					} else {
						cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_goods_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x677F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74756F7F73646F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7570 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.factory_goods_output = parse_tech_fac_goods_output(gen, err, context);
						} else {
							cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
						}
						break;
					case 0x72:
						// rgo_goods_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73646F6F677F6F67) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6867756F7268747F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7570 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.rgo_goods_output = parse_tech_rgo_goods_output(gen, err, context);
						} else {
							cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
						}
						break;
					default:
						cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
						break;
					}
					break;
				default:
					cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// area
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6572 && (cur.content[3] | 0x20 ) == 0x61)) {
							cobj.area(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x63:
						// cost
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x736F && (cur.content[3] | 0x20 ) == 0x74)) {
							cobj.cost(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						// icon
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6F63 && (cur.content[3] | 0x20 ) == 0x6E)) {
							cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// unit
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x696E && (cur.content[3] | 0x20 ) == 0x74)) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x79:
						// year
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6165 && (cur.content[3] | 0x20 ) == 0x72)) {
							cobj.year(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6C:
							// plurality
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6C617275) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7469 && (cur.content[8] | 0x20 ) == 0x79)) {
								cobj.plurality(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// poor_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F726F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x63:
							// activate_unit
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757F657461766974) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x696E && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.activate_unit(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x72:
							// artisan_input
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F6E61736974) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7570 && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// unciv_military
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C696D7F7669636E) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x72617469) && (cur.content[13] | 0x20 ) == 0x79)) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// CO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6C:
								// colonial_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61696E6F) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.colonial_points(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// conversion_rate
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6973726576) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
									cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x63:
							// activate_building
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x627F657461766974) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x646C6975) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6E69 && (cur.content[16] | 0x20 ) == 0x67)) {
								cobj.activate_building(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									default:
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										break;
									}
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									default:
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										break;
									}
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
inv_rgo_goods_output parse_inv_rgo_goods_output(token_generator& gen, error_handler& err, C&& context) {
	inv_rgo_goods_output cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
inv_fac_goods_output parse_inv_fac_goods_output(token_generator& gen, error_handler& err, C&& context) {
	inv_fac_goods_output cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
inv_fac_goods_throughput parse_inv_fac_goods_throughput(token_generator& gen, error_handler& err, C&& context) {
	inv_fac_goods_throughput cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
inv_rebel_org_gain parse_inv_rebel_org_gain(token_generator& gen, error_handler& err, C&& context) {
	inv_rebel_org_gain cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// value
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x756C6176) && (cur.content[4] | 0x20 ) == 0x65)) {
						cobj.value = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 7:
					// faction
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x74636166) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6F69 && (cur.content[6] | 0x20 ) == 0x6E)) {
						cobj.faction(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
inv_effect parse_inv_effect(token_generator& gen, error_handler& err, C&& context) {
	inv_effect cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 8:
					// rgo_size
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657A69737F6F6772))) {
						cobj.rgo_size = parse_tech_rgo_size(gen, err, context);
					} else {
						cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
					}
					break;
				case 14:
					// rebel_org_gain
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726F7F6C65626572) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x61677F67) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x6E69)) {
						cobj.rebel_org_gain(parse_inv_rebel_org_gain(gen, err, context), err, cur.line, context);
					} else {
						cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
					}
					break;
				case 16:
					// rgo_goods_output
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6F677F6F6772) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74757074756F7F73))) {
						cobj.rgo_goods_output = parse_inv_rgo_goods_output(gen, err, context);
					} else {
						cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
					}
					break;
				case 19:
					// factory_goods_input
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726F74636166) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F73646F6F67) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x7570 && (cur.content[18] | 0x20 ) == 0x74)) {
						gen.discard_group();
					} else {
						cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_goods_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x677F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74756F7F73646F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7570 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.factory_goods_output = parse_inv_fac_goods_output(gen, err, context);
						} else {
							cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
						}
						break;
					case 0x72:
						// rgo_goods_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73646F6F677F6F67) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6867756F7268747F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7570 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.rgo_goods_output = parse_inv_rgo_goods_output(gen, err, context);
						} else {
							cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
						}
						break;
					default:
						cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
						break;
					}
					break;
				case 24:
					// factory_goods_throughput
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726F74636166) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x68747F73646F6F67) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7475706867756F72))) {
						cobj.factory_goods_throughput = parse_inv_fac_goods_throughput(gen, err, context);
					} else {
						cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
					}
					break;
				default:
					cobj.any_group(cur.content, parse_unit_modifier_body(gen, err, context), err, cur.line, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// icon
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6369))) {
						cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6C:
							// plurality
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6C617275) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7469 && (cur.content[8] | 0x20 ) == 0x79)) {
								cobj.plurality(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// poor_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F726F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x67:
						// gas_attack
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F7361) && (cur.content[9] | 0x20 ) == 0x6B)) {
							cobj.gas_attack(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// GAS_DEFEN
						// running -  AS_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E656665647F7361))) {
							switch(0x20 | int32_t(cur.content[9])) {
							case 0x63:
								// gas_defence
								if((true && (cur.content[10] | 0x20 ) == 0x65)) {
									cobj.gas_defence(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// gas_defense
								if((true && (cur.content[10] | 0x20 ) == 0x65)) {
									cobj.gas_defence(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x65:
						// enable_crime
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72637F656C62616E) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6D69 && (cur.content[11] | 0x20 ) == 0x65)) {
							cobj.enable_crime(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x63:
							// activate_unit
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757F657461766974) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x696E && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.activate_unit(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x72:
							// artisan_input
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F6E61736974) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7570 && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// CO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6C:
								// colonial_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61696E6F) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.colonial_points(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// conversion_rate
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6973726576) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
									cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x73:
						// shared_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72707F6465726168) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69747365) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6567)) {
							cobj.shared_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x63:
							// activate_building
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x627F657461766974) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x646C6975) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6E69 && (cur.content[16] | 0x20 ) == 0x67)) {
								cobj.activate_building(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									default:
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										break;
									}
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
									break;
								default:
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									break;
								}
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										}
										break;
									default:
										cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
										break;
									}
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
									}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								}
								break;
							default:
								cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
								break;
							}
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
invention_contents parse_invention_contents(token_generator& gen, error_handler& err, C&& context) {
	invention_contents cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// limit
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x696D696C) && (cur.content[4] | 0x20 ) == 0x74)) {
						cobj.limit(make_inv_limit(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// chance
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x636E6168) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.chance(make_inv_chance(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x65:
						// effect
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63656666) && (cur.content[5] | 0x20 ) == 0x74)) {
							cobj.effect(parse_inv_effect(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// icon
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6F63 && (cur.content[3] | 0x20 ) == 0x6E)) {
							cobj.icon(assoc_type, parse_uint(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// news
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7765 && (cur.content[3] | 0x20 ) == 0x73)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attack
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (cur.content[5] | 0x20 ) == 0x6B)) {
							cobj.attack(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x62:
						// badboy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F626461) && (cur.content[5] | 0x20 ) == 0x79)) {
							cobj.badboy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// morale
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61726F) && (cur.content[5] | 0x20 ) == 0x65)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// DEFEN
						// running -  EFEN
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x63:
								// defence
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// defense
								if((true && (cur.content[6] | 0x20 ) == 0x65)) {
									cobj.defence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F78) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.max_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tax
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61747F6E) && (cur.content[6] | 0x20 ) == 0x78)) {
								cobj.min_tax(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_eff
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x657F7861) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6666)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attacker
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x656B && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.attacker(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// defender
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6564 && (cur.content[7] | 0x20 ) == 0x72)) {
							cobj.defender(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_size
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x737F6F67) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7A69 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.m_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697469727474))) {
							cobj.attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E))) {
							cobj.influence(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746F767F726F6F))) {
							cobj.poor_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x67:
							// rgo_input
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x6E697F6F) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x7570 && (cur.content[8] | 0x20 ) == 0x74)) {
								cobj.rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// rich_vote
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x767F6863) && (*(uint16_t const*)(&cur.content[6]) | 0x2020 ) == 0x746F && (cur.content[8] | 0x20 ) == 0x65)) {
								cobj.rich_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// dig_in_cap
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61637F6E697F6769) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.dig_in_cap(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// leadership
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6968737265646165) && (cur.content[9] | 0x20 ) == 0x70)) {
							cobj.leadership(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F78))) {
								cobj.max_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// min_tariff
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666697261747F6E))) {
								cobj.min_tariff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6F:
						// org_regain
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69616765727F6772) && (cur.content[9] | 0x20 ) == 0x6E)) {
							cobj.org_regain(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74776F72677F706F) && (cur.content[9] | 0x20 ) == 0x68)) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rgo_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[9] | 0x20 ) == 0x74)) {
							cobj.rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// seperatism
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369746172657065) && (cur.content[9] | 0x20 ) == 0x6D)) {
							cobj.seperatism(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// IM
						// running -  M
						if((true && (cur.content[1] | 0x20 ) == 0x6D)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6D:
								// immigration
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461726769))) {
									cobj.immigration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// import_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74736F637F74726F))) {
									cobj.import_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461727F656669) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x676E)) {
							cobj.life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_vote
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F767F656C646469) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574)) {
							cobj.middle_vote(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// combat_width
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69777F7461626D6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7464 && (cur.content[11] | 0x20 ) == 0x68)) {
							cobj.combat_width(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_cost
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F79726F74) && (cur.content[11] | 0x20 ) == 0x74)) {
									cobj.factory_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6F67727F6D) && (cur.content[11] | 0x20 ) == 0x66)) {
									cobj.farm_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x67:
						// goods_demand
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D65647F73646F6F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x64)) {
							cobj.goods_demand(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_repair
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7065727F6C61636F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6961 && (cur.content[11] | 0x20 ) == 0x72)) {
							cobj.local_repair(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN
						// running -  IN
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69)) {
							switch(0x20 | int32_t(cur.content[3])) {
							case 0x65:
								// mine_rgo_eff
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6F67727F))) {
									cobj.mine_rgo_eff(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// minimum_wage
								if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656761777F6D756D))) {
									cobj.minimum_wage(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x73:
						// SUPPLY_
						// running -  UPPLY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C707075) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F79)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x6C:
								// supply_limit
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x74696D69))) {
									cobj.supply_limit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// supply_range
								if((true && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65676E61))) {
									cobj.supply_range(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
							cobj.artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FA
						// running -  A
						if((true && (cur.content[1] | 0x20 ) == 0x61)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// factory_input
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706E697F79726F74) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7475)) {
									cobj.factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x72:
								// farm_rgo_size
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6F67727F6D) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x657A)) {
									cobj.farm_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// loan_interest
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746E697F6E616F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74736572))) {
							cobj.loan_interest(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_attrition
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469727474617F78) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6F69 && (cur.content[12] | 0x20 ) == 0x6E)) {
								cobj.max_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// mine_rgo_size
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6F67727F656E) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7A69 && (cur.content[12] | 0x20 ) == 0x65)) {
								cobj.mine_rgo_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// movement_cost
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F746E656D6576) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x736F && (cur.content[12] | 0x20 ) == 0x74)) {
								cobj.movement_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pension_level
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C7F6E6F69736E65) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.pension_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// factory_output
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[13] | 0x20 ) == 0x74)) {
							cobj.factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// immigrant_push
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7375707F) && (cur.content[13] | 0x20 ) == 0x68)) {
							cobj.immigrant_push(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// land_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727474617F646E61) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.land_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x62:
								// min_build_bank
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x6E61 && (cur.content[13] | 0x20 ) == 0x6B)) {
									cobj.min_build_bank(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// min_build_fort
								if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x726F && (cur.content[13] | 0x20 ) == 0x74)) {
									cobj.min_build_fort(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// reinforce_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563726F666E69) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x65746172))) {
								cobj.reinforce_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x67:
							// rgo_throughput
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67756F7268747F6F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74757068))) {
								cobj.rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x74:
						// tax_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63696666657F7861) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6569) && (cur.content[13] | 0x20 ) == 0x79)) {
							cobj.tax_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// war_exhaustion
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[13] | 0x20 ) == 0x6E)) {
							cobj.war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69737265766E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x61727F6E) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6574)) {
							cobj.conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// local_rgo_input
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F67727F6C61636F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x706E697F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7475)) {
							cobj.local_rgo_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// naval_attrition
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69746972) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6E6F)) {
							cobj.naval_attrition(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_life_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6566696C7F726F6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7364)) {
							cobj.poor_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x69:
								// reinforce_speed
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x737F6563726F666E) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x64656570))) {
									cobj.reinforce_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x73746E69))) {
									cobj.research_points(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x69:
							// rich_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6566696C7F6863) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6465656E) && (cur.content[14] | 0x20 ) == 0x73)) {
								cobj.rich_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// shared_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72707F6465726168) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x69747365) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6567)) {
							cobj.shared_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 16:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// admin_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6666657F6E696D64) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65696369) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x636E && (cur.content[15] | 0x20 ) == 0x79)) {
							cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x72:
								// local_rgo_output
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757074756F7F6F67) && (cur.content[15] | 0x20 ) == 0x74)) {
									cobj.local_rgo_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// local_ship_build
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6975627F706968) && (cur.content[15] | 0x20 ) == 0x64)) {
									cobj.local_ship_build(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						// military_tactics
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x74636174) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6369 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.military_tactics(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// number_of_voters
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x666F7F7265626D75) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746F767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7265 && (cur.content[15] | 0x20 ) == 0x73)) {
							cobj.number_of_voters(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 17:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x72:
							// ARMY_ORGANI
							// running -  MY_ORGANI
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6167726F7F796D) && (cur.content[10] | 0x20 ) == 0x69)) {
								switch(0x20 | int32_t(cur.content[11])) {
								case 0x73:
									// army_organisation
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// army_organization
									if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
										cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x73:
							// assimilation_rate
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616C696D6973) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x727F6E6F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x7461 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_creation_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616572637F) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x70737F6E) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6565 && (cur.content[16] | 0x20 ) == 0x64)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// colonial_prestige
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61696E6F6C) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6769 && (cur.content[16] | 0x20 ) == 0x65)) {
								cobj.colonial_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x64:
						// diplomatic_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63))) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_growth
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F70))) {
							cobj.pop_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6D:
							// immigrant_attract
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E617267696D) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x72747461) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6361 && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6E:
							// increase_research
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x727F657361657263) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x61657365) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6372 && (cur.content[16] | 0x20 ) == 0x68)) {
								cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6C:
						// LAND_ORGANI
						// running -  AND_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6167726F7F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x696E)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x73:
								// land_organisation
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// land_organization
								if((true && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[16] | 0x20 ) == 0x6E)) {
									cobj.land_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_loan_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F6E616F6C7F78) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6569 && (cur.content[16] | 0x20 ) == 0x72)) {
								cobj.max_loan_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// middle_life_needs
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66696C7F656C6464) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x656E7F65) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6465 && (cur.content[16] | 0x20 ) == 0x73)) {
								cobj.middle_life_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_size
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69737F6E6F697461) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x657A)) {
										cobj.mobilization_size(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// PO
						// running -  O
						if((true && (cur.content[1] | 0x20 ) == 0x6F)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x6F:
								// poor_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79727578756C7F72) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65656E7F) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7364)) {
									cobj.poor_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// population_growth
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F6974616C75) && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x776F7267) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6874)) {
									cobj.population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// rich_luxury_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
							cobj.rich_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// artisan_throughput
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x63:
						// colonial_migration
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974617267696D) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.colonial_migration(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x66:
						// FACTORY_
						// running -  ACTORY_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7972 && (cur.content[7] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[8])) {
							case 0x6F:
								// factory_owner_cost
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_owner_cost(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x74:
								// factory_throughput
								if((true && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[17] | 0x20 ) == 0x74)) {
									cobj.factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x69:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6E:
							// influence_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65756C66) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
								cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x73:
							// issue_change_speed
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6168637F657573) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656570737F6567))) {
								cobj.issue_change_speed(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// MAX_
							// running -  X_
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x7F78)) {
								switch(0x20 | int32_t(cur.content[4])) {
								case 0x6E:
									// max_national_focus
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C616E6F697461) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x75636F66) && (cur.content[17] | 0x20 ) == 0x73)) {
										cobj.max_national_focus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x77:
									// max_war_exhaustion
									if((true && (*(uint64_t const*)(&cur.content[5]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75616878657F7261) && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697473) && (cur.content[17] | 0x20 ) == 0x6E)) {
										cobj.max_war_exhaustion(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						case 0x69:
							// min_build_railroad
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F646C6975627F6E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64616F726C696172))) {
								cobj.min_build_railroad(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// NAVAL_ORGANI
						// running -  AVAL_ORGANI
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67726F7F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E61 && (cur.content[11] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x73:
								// naval_organisation
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// naval_organization
								if((true && (*(uint32_t const*)(&cur.content[13]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[17] | 0x20 ) == 0x6E)) {
									cobj.naval_organisation(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// permanent_prestige
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656E616D7265) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676974736572707F) && (cur.content[17] | 0x20 ) == 0x65)) {
							cobj.permanent_prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// supply_consumption
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F796C707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974706D75736E) && (cur.content[17] | 0x20 ) == 0x6E)) {
							cobj.supply_consumption(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// factory_maintenance
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F79726F746361) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E616E65746E6961) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6563)) {
							cobj.factory_maintenance(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// leadership_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7069687372656461) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[18] | 0x20 ) == 0x72)) {
								cobj.leadership_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							// literacy_con_impact
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F796361726574) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6361706D697F6E6F) && (cur.content[18] | 0x20 ) == 0x74)) {
								cobj.literacy_con_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x63:
								// LOCAL_
								// running -  AL_
								if((true && (*(uint16_t const*)(&cur.content[3]) | 0x2020 ) == 0x6C61 && (cur.content[5] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[6])) {
									case 0x61:
										// local_artisan_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_artisan_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x66:
										// local_factory_input
										if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x7475706E))) {
											cobj.local_factory_input(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							case 0x77:
								// low_income_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656D6F636E697F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_social_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6169636F737F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69646E6570737F) && (cur.content[18] | 0x20 ) == 0x67)) {
								cobj.max_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_luxury_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7578756C7F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736465656E7F7972))) {
									cobj.middle_luxury_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_social_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6169636F737F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646E657073))) {
									cobj.min_social_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						case 0x6F:
							// MOBILI
							// running -  BILI
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x696C6962))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x73:
									// mobilisation_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x7A:
									// mobilization_impact
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F6E6F697461) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
										cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// poor_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.poor_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_everyday_needs
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7364)) {
							cobj.rich_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// soldier_to_pop_loss
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F726569646C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C7F706F707F6F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7373)) {
							cobj.soldier_to_pop_loss(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 20:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_life_rating
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461727F6566696C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6E69 && (cur.content[19] | 0x20 ) == 0x67)) {
							cobj.colonial_life_rating(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// diplomatic_influence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65756C666E697F63) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.influence_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// education_efficiency
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x636E && (cur.content[19] | 0x20 ) == 0x79)) {
							cobj.education_efficiency(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_attack_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63617474617F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F6B) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.land_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// LOCAL_
							// running -  CAL_
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7F6C6163))) {
								switch(0x20 | int32_t(cur.content[6])) {
								case 0x61:
									// local_artisan_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F6E6173697472) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_artisan_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x66:
									// local_factory_output
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F79726F746361) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75707475) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_factory_output(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								case 0x72:
									// local_rgo_throughput
									if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F7268747F6F67) && (*(uint32_t const*)(&cur.content[15]) | uint32_t(0x20202020) ) == uint32_t(0x75706867) && (cur.content[19] | 0x20 ) == 0x74)) {
										cobj.local_rgo_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
									} else {
										err.unhandled_association_key(cur);
									}
									break;
								default:
									err.unhandled_association_key(cur);
									break;
								}
							} else {
								err.unhandled_association_key(cur);
								}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MIN_BUILD_
						// running -  IN_BUILD_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646C6975627F6E69) && (cur.content[9] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x6E:
								// min_build_naval_base
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7361627F6C617661) && (cur.content[19] | 0x20 ) == 0x65)) {
									cobj.min_build_naval_base(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x75:
								// min_build_university
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746973726576696E) && (cur.content[19] | 0x20 ) == 0x79)) {
									cobj.min_build_university(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// poor_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F636E697F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F656D) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6569 && (cur.content[19] | 0x20 ) == 0x72)) {
							cobj.poor_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x69:
							// rich_income_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D6F636E697F6863) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7265)) {
								cobj.rich_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261707F676E696C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707075737F7974) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x7472)) {
								cobj.ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x73:
						// social_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727F6C6169636F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F6D726F66) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7269 && (cur.content[19] | 0x20 ) == 0x65)) {
							cobj.social_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// unemployment_benefit
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D796F6C706D656E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656E65627F746E65) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6966 && (cur.content[19] | 0x20 ) == 0x74)) {
							cobj.unemployment_benefit(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// boost_strongest_party
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7274737F74736F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F747365676E6F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
							cobj.boost_strongest_party(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						// LAND_DEFEN
						// running -  AND_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656665647F646E61) && (cur.content[9] | 0x20 ) == 0x6E)) {
							switch(0x20 | int32_t(cur.content[10])) {
							case 0x63:
								// land_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// land_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7265)) {
									cobj.land_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_military_spending
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6570737F7972) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6E69 && (cur.content[20] | 0x20 ) == 0x67)) {
								cobj.max_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_everyday_needs
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726576657F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65656E7F79616479) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x7364)) {
									cobj.middle_everyday_needs(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_military_spending
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726174696C696D7F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646E6570737F79) && (*(uint16_t const*)(&cur.content[19]) | 0x2020 ) == 0x676E)) {
									cobj.min_military_spending(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// naval_attack_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474617F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F6B6361) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.naval_attack_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// poor_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F726F6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.poor_savings_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// rich_savings_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F686369) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNIT_
						// running -  NIT_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7F74696E))) {
							switch(0x20 | int32_t(cur.content[5])) {
							case 0x72:
								// unit_recruitment_time
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D746975726365) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x747F746E) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x6D69 && (cur.content[20] | 0x20 ) == 0x65)) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// unit_start_experience
								if((true && (*(uint64_t const*)(&cur.content[6]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F74726174) && (*(uint32_t const*)(&cur.content[14]) | uint32_t(0x20202020) ) == uint32_t(0x65697265) && (*(uint16_t const*)(&cur.content[18]) | 0x2020 ) == 0x636E && (cur.content[20] | 0x20 ) == 0x65)) {
									cobj.unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 22:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// global_conversion_rate
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F637F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F69737265766E) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x7461727F) && (cur.content[21] | 0x20 ) == 0x65)) {
							cobj.global_conversion_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// middle_income_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E697F656C646469) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F656D6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.middle_income_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// NAVAL_DEFEN
						// running -  AVAL_DEFEN
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6665647F6C617661) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6E65)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x63:
								// naval_defence_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// naval_defense_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F65) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7265)) {
									cobj.naval_defense_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x70:
						// pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74696C696D7F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F79636E61) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[21] | 0x20 ) == 0x72)) {
							cobj.pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 23:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// max_domestic_investment
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473656D6F647F78) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365766E697F6369) && (*(uint32_t const*)(&cur.content[18]) | uint32_t(0x20202020) ) == uint32_t(0x6E656D74) && (cur.content[22] | 0x20 ) == 0x74)) {
								cobj.max_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x69:
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x64:
								// middle_savings_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697661737F656C64) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F73676E) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
									/* discarded */
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6E:
								// min_domestic_investment
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697473656D6F647F) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747365766E697F63) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x746E656D))) {
									cobj.min_domestic_investment(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// political_reform_desire
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C61636974696C6F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6D726F6665727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x69736564) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x6572)) {
							cobj.political_reform_desire(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x75:
						// UNCIV_
						// running -  NCIV_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x7669636E) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x65:
								// unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 24:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F796D72) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.army_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// GLOBAL_
						// running -  LOBAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61626F6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7F6C)) {
							switch(0x20 | int32_t(cur.content[7])) {
							case 0x61:
								// global_assimilation_rate
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616C696D697373) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461727F6E6F69))) {
									cobj.global_assimilation_rate(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x69:
								// global_immigrant_attract
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E617267696D6D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746361727474617F))) {
									cobj.global_immigrant_attract(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x70:
								// global_population_growth
								if((true && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6974616C75706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6874776F72677F6E))) {
									cobj.global_population_growth(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6C:
						// LOCAL_
						// running -  OCAL_
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C61636F) && (cur.content[5] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x61:
								// local_artisan_throughput
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F6E6173697472) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
									cobj.local_artisan_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x66:
								// LOCAL_FACTORY_
								// running -  ACTORY_
								if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7972 && (cur.content[13] | 0x20 ) == 0x7F)) {
									switch(0x20 | int32_t(cur.content[14])) {
									case 0x6F:
										// local_factory_owner_cost
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F637F72656E77) && (cur.content[23] | 0x20 ) == 0x74)) {
											/* discarded */
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									case 0x74:
										// local_factory_throughput
										if((true && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75706867756F7268) && (cur.content[23] | 0x20 ) == 0x74)) {
											cobj.local_factory_throughput(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
										} else {
											err.unhandled_association_key(cur);
										}
										break;
									default:
										err.unhandled_association_key(cur);
										break;
									}
								} else {
									err.unhandled_association_key(cur);
									}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// navy_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x686365747F797661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637261657365727F) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6F627F68) && (*(uint16_t const*)(&cur.content[21]) | 0x2020 ) == 0x756E && (cur.content[23] | 0x20 ) == 0x73)) {
							cobj.navy_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// RE
						// running -  E
						if((true && (cur.content[1] | 0x20 ) == 0x65)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x67:
								// regular_experience_level
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7078657F72616C75) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E65697265) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x6576656C) && (cur.content[23] | 0x20 ) == 0x6C)) {
									cobj.regular_experience_level(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x73:
								// research_points_modifier
								if((true && (*(uint64_t const*)(&cur.content[3]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6863726165) && (*(uint64_t const*)(&cur.content[11]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646F6D7F73746E69) && (*(uint32_t const*)(&cur.content[19]) | uint32_t(0x20202020) ) == uint32_t(0x65696669) && (cur.content[23] | 0x20 ) == 0x72)) {
									cobj.research_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 25:
					// administrative_efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (cur.content[24] | 0x20 ) == 0x79)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 26:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// diplomatic_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6974616D6F6C7069) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73746E696F707F63) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.diplomatic_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6C:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// land_unit_start_experience
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74696E757F646E) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x78657F7472617473) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E6569726570))) {
								cobj.land_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// local_ruling_party_support
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C75727F6C6163) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747261707F676E) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F707075737F))) {
								cobj.local_ruling_party_support(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x70:
						// pop_consciousness_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// research_points_on_conquer
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F68637261657365) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F73746E696F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6575716E6F637F6E) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.research_points_on_conquer(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// tariff_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x66657F6666697261) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6569636966) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[25] | 0x20 ) == 0x72)) {
							cobj.tariff_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 27:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x6F:
							// core_pop_militancy_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F706F707F6572) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79636E6174696C69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[26] | 0x20 ) == 0x72)) {
								cobj.core_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x75:
							// culture_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65747F657275746C) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61657365727F6863) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756E6F627F686372) && (cur.content[26] | 0x20 ) == 0x73)) {
								cobj.culture_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6D:
						// MOBILI
						// running -  OBILI
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C69626F) && (cur.content[5] | 0x20 ) == 0x69)) {
							switch(0x20 | int32_t(cur.content[6])) {
							case 0x73:
								// mobilisation_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x7A:
								// mobilization_economy_impact
								if((true && (*(uint64_t const*)(&cur.content[7]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63657F6E6F697461) && (*(uint64_t const*)(&cur.content[15]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D697F796D6F6E6F) && (*(uint32_t const*)(&cur.content[23]) | uint32_t(0x20202020) ) == uint32_t(0x74636170))) {
									cobj.mobilization_impact(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x6E:
						// naval_unit_start_experience
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696E757F6C617661) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F74726174737F74) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65697265707865) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x6563)) {
							cobj.naval_unit_start_experience(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// suppression_points_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973736572707075) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E696F707F6E6F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F73) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x7265)) {
							cobj.suppression_points_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 28:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x62:
							// cb_generation_speed_modifier
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746172656E65677F) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656570737F6E6F69) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F64) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7265)) {
								cobj.cb_generation_speed_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x6F:
							// commerce_tech_research_bonus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x747F656372656D6D) && (*(uint64_t const*)(&cur.content[10]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657365727F686365) && (*(uint64_t const*)(&cur.content[18]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F627F68637261) && (*(uint16_t const*)(&cur.content[26]) | 0x2020 ) == 0x7375)) {
								cobj.commerce_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x69:
						// industry_tech_research_bonus
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972747375646E) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365727F68636574) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F627F6863726165) && (*(uint16_t const*)(&cur.content[25]) | 0x2020 ) == 0x756E && (cur.content[27] | 0x20 ) == 0x73)) {
							cobj.industry_tech_research_bonus(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x73:
						// SELF_UNCIV_
						// running -  ELF_UNCIV_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69636E757F666C65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7F76)) {
							switch(0x20 | int32_t(cur.content[11])) {
							case 0x65:
								// self_unciv_economic_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F63696D6F6E6F63) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_economic_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x6D:
								// self_unciv_military_modifier
								if((true && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[20]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265696669646F6D))) {
									cobj.self_unciv_military_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 29:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// education_efficiency_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461637564) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656963696666657F) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.education_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x67:
						// global_pop_militancy_modifier
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F707F6C61626F6C) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174696C696D7F70) && (*(uint64_t const*)(&cur.content[17]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69646F6D7F79636E) && (*(uint32_t const*)(&cur.content[25]) | uint32_t(0x20202020) ) == uint32_t(0x72656966))) {
							cobj.global_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 30:
					// civilization_progress_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617A696C69766963) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72707F6E6F6974) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7373657267) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x69666964) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7265)) {
						cobj.civilization_progress_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 31:
					// core_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F65726F63) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x6569 && (cur.content[30] | 0x20 ) == 0x72)) {
						cobj.core_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 33:
					// global_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F6C61626F6C67) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63736E6F637F706F) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7373656E73756F69) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696669646F6D7F) && (cur.content[32] | 0x20 ) == 0x72)) {
						cobj.global_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 34:
					// administrative_efficiency_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473696E696D6461) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F657669746172) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636E656963696666) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696669646F6D7F79) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x7265)) {
						cobj.administrative_efficiency_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 35:
					// non_accepted_pop_militancy_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6174696C696D7F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6669646F6D7F7963) && (*(uint16_t const*)(&cur.content[32]) | 0x2020 ) == 0x6569 && (cur.content[34] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_militancy_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 39:
					// non_accepted_pop_consciousness_modifier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656363617F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x706F707F64657470) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint64_t const*)(&cur.content[24]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F7373656E7375) && (*(uint32_t const*)(&cur.content[32]) | uint32_t(0x20202020) ) == uint32_t(0x6669646F) && (*(uint16_t const*)(&cur.content[36]) | 0x2020 ) == 0x6569 && (cur.content[38] | 0x20 ) == 0x72)) {
						cobj.non_accepted_pop_consciousness_modifier(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_yearly_pulse parse_s_on_yearly_pulse(token_generator& gen, error_handler& err, C&& context) {
	s_on_yearly_pulse cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_quarterly_pulse parse_s_on_quarterly_pulse(token_generator& gen, error_handler& err, C&& context) {
	s_on_quarterly_pulse cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_battle_won parse_s_on_battle_won(token_generator& gen, error_handler& err, C&& context) {
	s_on_battle_won cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_battle_lost parse_s_on_battle_lost(token_generator& gen, error_handler& err, C&& context) {
	s_on_battle_lost cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_surrender parse_s_on_surrender(token_generator& gen, error_handler& err, C&& context) {
	s_on_surrender cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_new_great_nation parse_s_on_new_great_nation(token_generator& gen, error_handler& err, C&& context) {
	s_on_new_great_nation cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_lost_great_nation parse_s_on_lost_great_nation(token_generator& gen, error_handler& err, C&& context) {
	s_on_lost_great_nation cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_election_tick parse_s_on_election_tick(token_generator& gen, error_handler& err, C&& context) {
	s_on_election_tick cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_colony_to_state parse_s_on_colony_to_state(token_generator& gen, error_handler& err, C&& context) {
	s_on_colony_to_state cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_state_conquest parse_s_on_state_conquest(token_generator& gen, error_handler& err, C&& context) {
	s_on_state_conquest cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_colony_to_state_free_slaves parse_s_on_colony_to_state_free_slaves(token_generator& gen, error_handler& err, C&& context) {
	s_on_colony_to_state_free_slaves cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_debtor_default parse_s_on_debtor_default(token_generator& gen, error_handler& err, C&& context) {
	s_on_debtor_default cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_debtor_default_small parse_s_on_debtor_default_small(token_generator& gen, error_handler& err, C&& context) {
	s_on_debtor_default_small cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_debtor_default_second parse_s_on_debtor_default_second(token_generator& gen, error_handler& err, C&& context) {
	s_on_debtor_default_second cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_civilize parse_s_on_civilize(token_generator& gen, error_handler& err, C&& context) {
	s_on_civilize cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_my_factories_nationalized parse_s_on_my_factories_nationalized(token_generator& gen, error_handler& err, C&& context) {
	s_on_my_factories_nationalized cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_crisis_declare_interest parse_s_on_crisis_declare_interest(token_generator& gen, error_handler& err, C&& context) {
	s_on_crisis_declare_interest cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_election_started parse_s_on_election_started(token_generator& gen, error_handler& err, C&& context) {
	s_on_election_started cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
s_on_election_finished parse_s_on_election_finished(token_generator& gen, error_handler& err, C&& context) {
	s_on_election_finished cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
on_action_file parse_on_action_file(token_generator& gen, error_handler& err, C&& context) {
	on_action_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 11:
					// on_civilize
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C697669637F6E6F) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7A69 && (cur.content[10] | 0x20 ) == 0x65)) {
						cobj.on_civilize = parse_s_on_civilize(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 12:
					// on_surrender
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65727275737F6E6F) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x7265646E))) {
						cobj.on_surrender = parse_s_on_surrender(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 13:
					// on_battle_won
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C747461627F6E6F) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6F777F65) && (cur.content[12] | 0x20 ) == 0x6E)) {
						cobj.on_battle_won = parse_s_on_battle_won(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 14:
					// on_battle_lost
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C747461627F6E6F) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6F6C7F65) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x7473)) {
						cobj.on_battle_lost = parse_s_on_battle_lost(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 15:
					// on_yearly_pulse
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C726165797F6E6F) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x75707F79) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x736C && (cur.content[14] | 0x20 ) == 0x65)) {
						cobj.on_yearly_pulse = parse_s_on_yearly_pulse(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 16:
					// on_election_tick
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7463656C657F6E6F) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6B6369747F6E6F69))) {
						cobj.on_election_tick = parse_s_on_election_tick(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 17:
					// ON_
					// running -  ON_
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6E6F && (cur.content[2] | 0x20 ) == 0x7F)) {
						switch(0x20 | int32_t(cur.content[3])) {
						case 0x64:
							// on_debtor_default
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65647F726F746265) && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6C756166) && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.on_debtor_default = parse_s_on_debtor_default(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x73:
							// on_state_conquest
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F637F65746174) && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x73657571) && (cur.content[16] | 0x20 ) == 0x74)) {
								cobj.on_state_conquest = parse_s_on_state_conquest(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
						}
					break;
				case 18:
					// ON_
					// running -  ON_
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6E6F && (cur.content[2] | 0x20 ) == 0x7F)) {
						switch(0x20 | int32_t(cur.content[3])) {
						case 0x63:
							// on_colony_to_state
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F747F796E6F6C6F) && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6174737F) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6574)) {
								cobj.on_colony_to_state = parse_s_on_colony_to_state(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x71:
							// on_quarterly_pulse
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x796C726574726175) && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x6C75707F) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6573)) {
								cobj.on_quarterly_pulse = parse_s_on_quarterly_pulse(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
						}
					break;
				case 19:
					// ON_
					// running -  ON_
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6E6F && (cur.content[2] | 0x20 ) == 0x7F)) {
						switch(0x20 | int32_t(cur.content[3])) {
						case 0x65:
							// on_election_started
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F697463656C) && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x72617473) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6574 && (cur.content[18] | 0x20 ) == 0x64)) {
								cobj.on_election_started = parse_s_on_election_started(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x6E:
							// on_new_great_nation
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616572677F7765) && (*(uint32_t const*)(&cur.content[12]) | uint32_t(0x20202020) ) == uint32_t(0x74616E7F) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6F69 && (cur.content[18] | 0x20 ) == 0x6E)) {
								cobj.on_new_great_nation = parse_s_on_new_great_nation(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
						}
					break;
				case 20:
					// ON_
					// running -  ON_
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6E6F && (cur.content[2] | 0x20 ) == 0x7F)) {
						switch(0x20 | int32_t(cur.content[3])) {
						case 0x65:
							// on_election_finished
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F697463656C) && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64656873696E6966))) {
								cobj.on_election_finished = parse_s_on_election_finished(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x6C:
							// on_lost_great_nation
							if((true && (*(uint64_t const*)(&cur.content[4]) | uint64_t(0x2020202020202020) ) == uint64_t(0x616572677F74736F) && (*(uint64_t const*)(&cur.content[12]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F6974616E7F74))) {
								cobj.on_lost_great_nation = parse_s_on_lost_great_nation(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
						}
					break;
				case 23:
					// on_debtor_default_small
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F746265647F6E6F) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C75616665647F72) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x6D737F74) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x6C61 && (cur.content[22] | 0x20 ) == 0x6C)) {
						cobj.on_debtor_default_small = parse_s_on_debtor_default_small(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 24:
					// on_debtor_default_second
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F746265647F6E6F) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C75616665647F72) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E6F6365737F74))) {
						cobj.on_debtor_default_second = parse_s_on_debtor_default_second(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 26:
					// on_crisis_declare_interest
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x69736972637F6E6F) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72616C6365647F73) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657265746E697F65) && (*(uint16_t const*)(&cur.content[24]) | 0x2020 ) == 0x7473)) {
						cobj.on_crisis_declare_interest = parse_s_on_crisis_declare_interest(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 28:
					// on_my_factories_nationalized
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61667F796D7F6E6F) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F736569726F7463) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C616E6F6974616E) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x64657A69))) {
						cobj.on_my_factories_nationalized = parse_s_on_my_factories_nationalized(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 30:
					// on_colony_to_state_free_slaves
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F6C6F637F6E6F) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6174737F6F747F79) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F656572667F6574) && (*(uint32_t const*)(&cur.content[24]) | uint32_t(0x20202020) ) == uint32_t(0x76616C73) && (*(uint16_t const*)(&cur.content[28]) | 0x2020 ) == 0x7365)) {
						cobj.on_colony_to_state_free_slaves = parse_s_on_colony_to_state_free_slaves(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
rebel_gov_list parse_rebel_gov_list(token_generator& gen, error_handler& err, C&& context) {
	rebel_gov_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
rebel_body parse_rebel_body(token_generator& gen, error_handler& err, C&& context) {
	rebel_body cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 9:
					// will_rise
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7369727F6C6C6977) && (cur.content[8] | 0x20 ) == 0x65)) {
						cobj.will_rise(make_reb_will_rise(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 10:
					// government
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D6E7265766F67) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x746E)) {
						cobj.government = parse_rebel_gov_list(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 12:
					// spawn_chance
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x68637F6E77617073) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65636E61))) {
						cobj.spawn_chance(make_reb_spawn_chance(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 16:
					// siege_won_effect
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F777F6567656973) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7463656666657F6E))) {
						cobj.siege_won_effect(make_reb_s_won_effect(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 17:
					// siege_won_trigger
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F777F6567656973) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6567676972747F6E) && (cur.content[16] | 0x20 ) == 0x72)) {
						cobj.siege_won_trigger(make_reb_s_won_trigger(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 19:
					// movement_evaluation
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656D65766F6D) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7461756C6176657F) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6F69 && (cur.content[18] | 0x20 ) == 0x6E)) {
						cobj.movement_evaluation(make_reb_movement_eval(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 23:
					// demands_enforced_effect
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F73646E616D6564) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646563726F666E65) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x6666657F) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x6365 && (cur.content[22] | 0x20 ) == 0x74)) {
						cobj.demands_enforced_effect(make_reb_enforce_effect(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 24:
					// demands_enforced_trigger
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F73646E616D6564) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646563726F666E65) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726567676972747F))) {
						cobj.demands_enforced_trigger(make_reb_enforced_trigger(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// area
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6572 && (cur.content[3] | 0x20 ) == 0x61)) {
							cobj.area(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// icon
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6F63 && (cur.content[3] | 0x20 ) == 0x6E)) {
							cobj.icon(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 5:
					// smart
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x72616D73) && (cur.content[4] | 0x20 ) == 0x74)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 7:
					// general
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x656E6567) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6172 && (cur.content[6] | 0x20 ) == 0x6C)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// ideology
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79676F6C6F656469))) {
						cobj.ideology(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// defection
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697463656665))) {
							cobj.defection(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x72:
						// resilient
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E65696C697365))) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					// reinforcing
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63726F666E696572) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6E69 && (cur.content[10] | 0x20 ) == 0x67)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// defect_delay
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65647F7463656665) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x616C && (cur.content[11] | 0x20 ) == 0x79)) {
							cobj.defect_delay(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x69:
						// independence
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65646E657065646E) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x636E && (cur.content[11] | 0x20 ) == 0x65)) {
							cobj.independence(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 13:
					// unit_transfer
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6172747F74696E75) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6566736E) && (cur.content[12] | 0x20 ) == 0x72)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 15:
					// occupation_mult
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697461707563636F) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6D7F6E6F) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x6C75 && (cur.content[14] | 0x20 ) == 0x74)) {
						cobj.occupation_mult(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 18:
					// allow_all_cultures
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C617F776F6C6C61) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7275746C75637F6C) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x7365)) {
						cobj.allow_all_cultures(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 19:
					// allow_all_religions
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C617F776F6C6C61) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6967696C65727F6C) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6E6F && (cur.content[18] | 0x20 ) == 0x73)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 20:
					// allow_all_ideologies
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C617F776F6C6C61) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6C6F6564697F6C) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x73656967))) {
						cobj.allow_all_ideologies(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 21:
					// break_alliance_on_win
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C617F6B61657262) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F7F65636E61696C) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x69777F6E) && (cur.content[20] | 0x20 ) == 0x6E)) {
						cobj.break_alliance_on_win(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 24:
					// allow_all_culture_groups
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C617F776F6C6C61) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7275746C75637F6C) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7370756F72677F65))) {
						cobj.allow_all_culture_groups(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
decision parse_decision(token_generator& gen, error_handler& err, C&& context) {
	decision cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// allow
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F6C6C61) && (cur.content[4] | 0x20 ) == 0x77)) {
						cobj.allow(make_decision_trigger(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 6:
					// effect
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65666665) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7463)) {
						cobj.effect(make_decision_effect(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 9:
					// potential
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6169746E65746F70) && (cur.content[8] | 0x20 ) == 0x6C)) {
						cobj.potential(make_decision_trigger(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 10:
					// ai_will_do
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6C69777F6961) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6F64)) {
						cobj.ai_will_do(make_decision_ai_choice(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// news
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x7377656E))) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 5:
					// alert
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x72656C61) && (cur.content[4] | 0x20 ) == 0x74)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 7:
					// picture
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x74636970) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7275 && (cur.content[6] | 0x20 ) == 0x65)) {
						cobj.picture(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// news_title
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469747F7377656E) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x656C)) {
						cobj.news_title(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 12:
					// news_picture
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6369707F7377656E) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65727574))) {
						cobj.news_picture(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 14:
					// news_desc_long
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F7377656E) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6F6C7F63) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x676E)) {
						cobj.news_desc_long(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 15:
					// news_desc_short
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F7377656E) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x68737F63) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x726F && (cur.content[14] | 0x20 ) == 0x74)) {
						cobj.news_desc_short(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 16:
					// news_desc_medium
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F7377656E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D756964656D7F63))) {
						cobj.news_desc_medium(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
decision_list parse_decision_list(token_generator& gen, error_handler& err, C&& context) {
	decision_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_decision(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
decision_file parse_decision_file(token_generator& gen, error_handler& err, C&& context) {
	decision_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 19:
					// political_decisions
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61636974696C6F70) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6973696365647F6C) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6E6F && (cur.content[18] | 0x20 ) == 0x73)) {
						cobj.political_decisions = parse_decision_list(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 20:
					// diplomatic_decisions
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616D6F6C706964) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73696365647F6369) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x736E6F69))) {
						cobj.political_decisions = parse_decision_list(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
scan_event parse_scan_event(token_generator& gen, error_handler& err, C&& context) {
	scan_event cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 2:
					// id
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6469)) {
						cobj.id = parse_int(rh_token.content, rh_token.line, err);
					} else {
						
					}
					break;
				case 17:
					// is_triggered_only
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67676972747F7369) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6E6F7F64657265) && (cur.content[16] | 0x20 ) == 0x79)) {
						cobj.is_triggered_only = parse_bool(rh_token.content, rh_token.line, err);
					} else {
						
					}
					break;
				default:
					
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
generic_event parse_generic_event(token_generator& gen, error_handler& err, C&& context) {
	generic_event cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 6:
					// option
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6974706F) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6E6F)) {
						cobj.option(make_event_option(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 7:
					// trigger
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67697274) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6567 && (cur.content[6] | 0x20 ) == 0x72)) {
						cobj.trigger = make_event_trigger(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 9:
					// immediate
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616964656D6D69) && (cur.content[8] | 0x20 ) == 0x65)) {
						cobj.immediate(make_immediate_effect(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 19:
					// mean_time_to_happen
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D69747F6E61656D) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7061687F6F747F65) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6570 && (cur.content[18] | 0x20 ) == 0x6E)) {
						cobj.mean_time_to_happen = make_event_mtth(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 2:
					// id
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6469)) {
						cobj.id = parse_int(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// desc
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7365 && (cur.content[3] | 0x20 ) == 0x63)) {
							cobj.desc(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// news
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7765 && (cur.content[3] | 0x20 ) == 0x73)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 5:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						// major
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x726F6A61))) {
							cobj.major = parse_bool(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// title
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x656C7469))) {
							cobj.title(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					// picture
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x74636970) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7275 && (cur.content[6] | 0x20 ) == 0x65)) {
						cobj.picture(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// election
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697463656C65))) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// news_title
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7469747F7377656E) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x656C)) {
						cobj.news_title(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// issue_group
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F72677F65757373) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7075)) {
							cobj.issue_group(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x77:
						// window_type
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x79747F776F646E69) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6570)) {
							cobj.window_type = parse_text(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					// news_picture
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6369707F7377656E) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x65727574))) {
						cobj.news_picture(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// fire_only_once
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x796C6E6F7F657269) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x636E6F7F) && (cur.content[13] | 0x20 ) == 0x65)) {
							cobj.fire_only_once = parse_bool(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// news_desc_long
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637365647F737765) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6C7F) && (cur.content[13] | 0x20 ) == 0x67)) {
							cobj.news_desc_long(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 15:
					// news_desc_short
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F7377656E) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x68737F63) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x726F && (cur.content[14] | 0x20 ) == 0x74)) {
						cobj.news_desc_short(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 16:
					// news_desc_medium
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365647F7377656E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D756964656D7F63))) {
						cobj.news_desc_medium(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 17:
					// is_triggered_only
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67676972747F7369) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C6E6F7F64657265) && (cur.content[16] | 0x20 ) == 0x79)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 24:
					// allow_multiple_instances
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756D7F776F6C6C61) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F656C7069746C) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7365636E6174736E))) {
						cobj.allow_multiple_instances = parse_bool(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
event_file parse_event_file(token_generator& gen, error_handler& err, C&& context) {
	event_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 13:
					// country_event
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F7972746E756F63) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6E657665) && (cur.content[12] | 0x20 ) == 0x74)) {
						scan_country_event(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 14:
					// province_event
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E69766F7270) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6576657F) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x746E)) {
						scan_province_event(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
oob_relationship parse_oob_relationship(token_generator& gen, error_handler& err, C&& context) {
	oob_relationship cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6C:
						// level
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6C657665))) {
							cobj.level(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x76:
						// value
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x65756C61))) {
							cobj.value(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 11:
					// truce_until
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E757F6563757274) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6974 && (cur.content[10] | 0x20 ) == 0x6C)) {
						cobj.truce_until(assoc_type, parse_date(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x69:
						// influence_value
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65636E65756C666E) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C61767F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6575)) {
							cobj.influence_value(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// military_access
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65636361) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7373)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
oob_leader parse_oob_leader(token_generator& gen, error_handler& err, C&& context) {
	oob_leader cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// date
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7461 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.date(assoc_type, parse_date(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// name
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D61 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.name(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// type
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7079 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.type(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					// picture
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x74636970) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7275 && (cur.content[6] | 0x20 ) == 0x65)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// prestige
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6567697473657270))) {
						cobj.prestige = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// background
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x756F72676B636162) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x646E)) {
						cobj.background(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 11:
					// personality
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C616E6F73726570) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7469 && (cur.content[10] | 0x20 ) == 0x79)) {
						cobj.personality(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
oob_regiment parse_oob_regiment(token_generator& gen, error_handler& err, C&& context) {
	oob_regiment cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x68:
						// home
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D6F && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.home(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// name
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D61 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.name(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// type
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7079 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.type(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
oob_ship parse_oob_ship(token_generator& gen, error_handler& err, C&& context) {
	oob_ship cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6E:
						// name
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D61 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.name(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// type
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7079 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.type(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
oob_army parse_oob_army(token_generator& gen, error_handler& err, C&& context) {
	oob_army cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D72 && (cur.content[3] | 0x20 ) == 0x79)) {
							make_oob_army(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6E:
						// navy
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7661 && (cur.content[3] | 0x20 ) == 0x79)) {
							make_oob_navy(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 6:
					// leader
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6461656C) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7265)) {
						cobj.leader(make_army_leader(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 8:
					// regiment
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746E656D69676572))) {
						make_oob_regiment(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// name
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x656D616E))) {
						cobj.name(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// location
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461636F6C))) {
						cobj.location(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
oob_navy parse_oob_navy(token_generator& gen, error_handler& err, C&& context) {
	oob_navy cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D72 && (cur.content[3] | 0x20 ) == 0x79)) {
							make_oob_army(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6E:
						// navy
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7661 && (cur.content[3] | 0x20 ) == 0x79)) {
							make_oob_navy(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x73:
						// ship
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6968 && (cur.content[3] | 0x20 ) == 0x70)) {
							make_oob_ship(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 6:
					// leader
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6461656C) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7265)) {
						cobj.leader(make_navy_leader(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// name
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x656D616E))) {
						cobj.name(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// location
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F697461636F6C))) {
						cobj.location(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
oob_file parse_oob_file(token_generator& gen, error_handler& err, C&& context) {
	oob_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 2:
					// ai
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6961)) {
						gen.discard_group();
					} else {
						make_oob_relationship(cur.content, gen, err, context);
					}
					break;
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D72 && (cur.content[3] | 0x20 ) == 0x79)) {
							make_oob_army(gen, err, context);
						} else {
							make_oob_relationship(cur.content, gen, err, context);
						}
						break;
					case 0x6E:
						// navy
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7661 && (cur.content[3] | 0x20 ) == 0x79)) {
							make_oob_navy(gen, err, context);
						} else {
							make_oob_relationship(cur.content, gen, err, context);
						}
						break;
					default:
						make_oob_relationship(cur.content, gen, err, context);
						break;
					}
					break;
				case 6:
					// leader
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6461656C) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7265)) {
						cobj.leader(parse_oob_leader(gen, err, context), err, cur.line, context);
					} else {
						make_oob_relationship(cur.content, gen, err, context);
					}
					break;
				default:
					make_oob_relationship(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
production_employee parse_production_employee(token_generator& gen, error_handler& err, C&& context) {
	production_employee cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 6:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// amount
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6E756F6D) && (cur.content[5] | 0x20 ) == 0x74)) {
							cobj.amount = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x65:
						// effect
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x63656666) && (cur.content[5] | 0x20 ) == 0x74)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					// poptype
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x74706F70) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7079 && (cur.content[6] | 0x20 ) == 0x65)) {
						cobj.poptype(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 17:
					// effect_multiplier
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6D7F746365666665) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65696C7069746C75) && (cur.content[16] | 0x20 ) == 0x72)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
production_employee_set parse_production_employee_set(token_generator& gen, error_handler& err, C&& context) {
	production_employee_set cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			cobj.free_group(parse_production_employee(gen, err, context), err, cur.line, context);
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
production_bonus parse_production_bonus(token_generator& gen, error_handler& err, C&& context) {
	production_bonus cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 7:
					// trigger
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67697274) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6567 && (cur.content[6] | 0x20 ) == 0x72)) {
						cobj.trigger = make_production_bonus_trigger(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// value
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x756C6176) && (cur.content[4] | 0x20 ) == 0x65)) {
						cobj.value = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
production_type parse_production_type(token_generator& gen, error_handler& err, C&& context) {
	production_type cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// bonus
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x73756E6F))) {
							cobj.bonus(parse_production_bonus(gen, err, context), err, cur.line, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6F:
						// owner
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x72656E77))) {
							cobj.owner = parse_production_employee(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 9:
					// employees
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6565796F6C706D65) && (cur.content[8] | 0x20 ) == 0x73)) {
						cobj.employees = parse_production_employee_set(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 10:
					// efficiency
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65696369666665) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7963)) {
						cobj.efficiency = make_prod_commodity_array(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 11:
					// INPUT_
					// running -  INPUT_
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x75706E69) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7F74)) {
						switch(0x20 | int32_t(cur.content[6])) {
						case 0x62:
							// input_bonus
							if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x73756E6F))) {
								cobj.input_bonus(parse_production_bonus(gen, err, context), err, cur.line, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x67:
							// input_goods
							if((true && (*(uint32_t const*)(&cur.content[7]) | uint32_t(0x20202020) ) == uint32_t(0x73646F6F))) {
								cobj.input_goods = make_prod_commodity_array(gen, err, context);
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
						}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// farm
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7261 && (cur.content[3] | 0x20 ) == 0x6D)) {
							cobj.farm = parse_bool(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// mine
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6E69 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.mine = parse_bool(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// type
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7079 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.type(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 5:
					// value
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x756C6176) && (cur.content[4] | 0x20 ) == 0x65)) {
						cobj.value = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// template
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6574616C706D6574))) {
						cobj.as_template(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 9:
					// workforce
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63726F666B726F77) && (cur.content[8] | 0x20 ) == 0x65)) {
						cobj.workforce = parse_int(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// is_coastal
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7473616F637F7369) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6C61)) {
						cobj.is_coastal = parse_bool(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 12:
					// output_goods
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x677F74757074756F) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x73646F6F))) {
						cobj.output_goods(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
production_types_file parse_production_types_file(token_generator& gen, error_handler& err, C&& context) {
	production_types_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					make_production_type(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
alliance parse_alliance(token_generator& gen, error_handler& err, C&& context) {
	alliance cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// first
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x73726966) && (cur.content[4] | 0x20 ) == 0x74)) {
						cobj.first(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					// second
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F636573) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x646E)) {
						cobj.second(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// end_date
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461647F646E65))) {
						cobj.end_date(assoc_type, parse_date(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// start_date
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61647F7472617473) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6574)) {
						cobj.start_date(assoc_type, parse_date(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
vassal_description parse_vassal_description(token_generator& gen, error_handler& err, C&& context) {
	vassal_description cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// first
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x73726966) && (cur.content[4] | 0x20 ) == 0x74)) {
						cobj.first(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					// second
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F636573) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x646E)) {
						cobj.second(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// end_date
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657461647F646E65))) {
						cobj.end_date(assoc_type, parse_date(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// start_date
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61647F7472617473) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6574)) {
						cobj.start_date(assoc_type, parse_date(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
diplomacy_file parse_diplomacy_file(token_generator& gen, error_handler& err, C&& context) {
	diplomacy_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// union
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F696E75) && (cur.content[4] | 0x20 ) == 0x6E)) {
						make_vassal(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 6:
					// vassal
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x73736176) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6C61)) {
						make_vassal(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// alliance
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x61696C6C) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x636E && (cur.content[7] | 0x20 ) == 0x65)) {
							make_alliance(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x73:
						// substate
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736275) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x7461 && (cur.content[7] | 0x20 ) == 0x65)) {
							make_substate(gen, err, context);
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
govt_flag_block parse_govt_flag_block(token_generator& gen, error_handler& err, C&& context) {
	govt_flag_block cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// flag
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67616C66))) {
						cobj.flag(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 10:
					// government
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D6E7265766F67) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x746E)) {
						cobj.government(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
scripted_govt_flag_block parse_scripted_govt_flag_block(token_generator& gen, error_handler& err, C&& context) {
	scripted_govt_flag_block cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 7:
					// trigger
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x67697274) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6567 && (cur.content[6] | 0x20 ) == 0x72)) {
						cobj.trigger = make_scripted_govt_flag_trigger(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 9:
					// flag_type
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7079747F67616C66) && (cur.content[8] | 0x20 ) == 0x65)) {
						cobj.flag_type = parse_text(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
upper_house_block parse_upper_house_block(token_generator& gen, error_handler& err, C&& context) {
	upper_house_block cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
foreign_investment_block parse_foreign_investment_block(token_generator& gen, error_handler& err, C&& context) {
	foreign_investment_block cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_value(cur.content, assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
country_history_file parse_country_history_file(token_generator& gen, error_handler& err, C&& context) {
	country_history_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 9:
					// govt_flag
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x616C667F74766F67) && (cur.content[8] | 0x20 ) == 0x67)) {
						cobj.govt_flag(parse_govt_flag_block(gen, err, context), err, cur.line, context);
					} else {
						enter_country_file_dated_block(cur.content, gen, err, context);
					}
					break;
				case 11:
					// upper_house
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F687F7265707075) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x7375 && (cur.content[10] | 0x20 ) == 0x65)) {
						cobj.upper_house = parse_upper_house_block(gen, err, context);
					} else {
						enter_country_file_dated_block(cur.content, gen, err, context);
					}
					break;
				case 18:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// foreign_investment
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F6E676965726F) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E656D747365766E) && (cur.content[17] | 0x20 ) == 0x74)) {
							cobj.foreign_investment = parse_foreign_investment_block(gen, err, context);
						} else {
							enter_country_file_dated_block(cur.content, gen, err, context);
						}
						break;
					case 0x73:
						// scripted_govt_flag
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F64657470697263) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x616C667F74766F67) && (cur.content[17] | 0x20 ) == 0x67)) {
							cobj.scripted_govt_flag(parse_scripted_govt_flag_block(gen, err, context), err, cur.line, context);
						} else {
							enter_country_file_dated_block(cur.content, gen, err, context);
						}
						break;
					default:
						enter_country_file_dated_block(cur.content, gen, err, context);
						break;
					}
					break;
				default:
					enter_country_file_dated_block(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 3:
					// oob
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6F6F && (cur.content[2] | 0x20 ) == 0x62)) {
						cobj.oob(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 7:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// capital
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x61746970) && (cur.content[6] | 0x20 ) == 0x6C)) {
								cobj.capital(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						case 0x75:
							// culture
							if((true && (*(uint32_t const*)(&cur.content[2]) | uint32_t(0x20202020) ) == uint32_t(0x7275746C) && (cur.content[6] | 0x20 ) == 0x65)) {
								cobj.culture(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
							}
							break;
						default:
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
							break;
						}
						break;
					case 0x73:
						// schools
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6F6F6863) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x736C)) {
							cobj.schools(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// decision
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x73696365) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6F69 && (cur.content[7] | 0x20 ) == 0x6E)) {
							cobj.decision(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// literacy
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x72657469) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6361 && (cur.content[7] | 0x20 ) == 0x79)) {
							cobj.literacy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// prestige
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x74736572) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6769 && (cur.content[7] | 0x20 ) == 0x65)) {
							cobj.prestige(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x72:
						// religion
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x67696C65) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6F69 && (cur.content[7] | 0x20 ) == 0x6E)) {
							cobj.religion(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// civilized
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64657A696C697669))) {
							cobj.civilized(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// plurality
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7974696C6172756C))) {
							cobj.plurality(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 10:
					// government
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656D6E7265766F67) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x746E)) {
						cobj.government(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 12:
					// ruling_party
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x707F676E696C7572) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x79747261))) {
						cobj.ruling_party(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// consciousness
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x73756F6963736E6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7373656E))) {
							cobj.consciousness(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6C:
						// last_election
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63656C657F747361) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6974))) {
							/* discarded */
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x6E:
						// nationalvalue
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x766C616E6F697461) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65756C61))) {
							cobj.nationalvalue(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 14:
					// remove_culture
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F65766F6D6572) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x75746C75) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x6572)) {
						cobj.remove_culture(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// colonial_points
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C61696E6F6C6F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6E696F70) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x7374)) {
							cobj.colonial_points(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x70:
						// primary_culture
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637F7972616D6972) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x75746C75) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6572)) {
							cobj.primary_culture(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					case 0x73:
						// set_global_flag
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61626F6C677F7465) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6C667F6C) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6761)) {
							cobj.set_global_flag(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						}
						break;
					default:
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						break;
					}
					break;
				case 16:
					// set_country_flag
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E756F637F746573) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x67616C667F797274))) {
						cobj.set_country_flag(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 20:
					// is_releasable_vassal
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61656C65727F7369) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61767F656C626173) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x6C617373))) {
						cobj.is_releasable_vassal(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 22:
					// nonstate_consciousness
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65746174736E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6963736E6F637F) && (*(uint32_t const*)(&cur.content[16]) | uint32_t(0x20202020) ) == uint32_t(0x656E7375) && (*(uint16_t const*)(&cur.content[20]) | 0x2020 ) == 0x7373)) {
						cobj.nonstate_consciousness(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				case 26:
					// non_state_culture_literacy
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746174737F6E6F6E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7275746C75637F65) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61726574696C7F65) && (*(uint16_t const*)(&cur.content[24]) | 0x2020 ) == 0x7963)) {
						cobj.non_state_culture_literacy(assoc_type, parse_float(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					}
					break;
				default:
					cobj.any_value(cur.content, assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
history_war_goal parse_history_war_goal(token_generator& gen, error_handler& err, C&& context) {
	history_war_goal cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 5:
					// actor
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F746361) && (cur.content[4] | 0x20 ) == 0x72)) {
						cobj.actor(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 7:
					// country
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E756F63) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7274 && (cur.content[6] | 0x20 ) == 0x79)) {
						cobj.country(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// receiver
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7265766965636572))) {
						cobj.receiver(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 11:
					// casus_belli
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65627F7375736163) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6C6C && (cur.content[10] | 0x20 ) == 0x69)) {
						cobj.casus_belli(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 17:
					// state_province_id
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72707F6574617473) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x697F65636E69766F) && (cur.content[16] | 0x20 ) == 0x64)) {
						cobj.state_province_id(assoc_type, parse_int(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
war_block parse_war_block(token_generator& gen, error_handler& err, C&& context) {
	war_block cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 8:
					// war_goal
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C616F677F726177))) {
						cobj.war_goal(parse_history_war_goal(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 9:
					// world_war
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61777F646C726F77) && (cur.content[8] | 0x20 ) == 0x72)) {
						cobj.world_war(assoc_type, parse_bool(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// ADD_
						// running -  DD_
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6464 && (cur.content[3] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[4])) {
							case 0x61:
								// add_attacker
								if((true && (*(uint32_t const*)(&cur.content[5]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x656B && (cur.content[11] | 0x20 ) == 0x72)) {
									cobj.add_attacker(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x64:
								// add_defender
								if((true && (*(uint32_t const*)(&cur.content[5]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6564 && (cur.content[11] | 0x20 ) == 0x72)) {
									cobj.add_defender(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					case 0x72:
						// REM_
						// running -  EM_
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D65 && (cur.content[3] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[4])) {
							case 0x61:
								// rem_attacker
								if((true && (*(uint32_t const*)(&cur.content[5]) | uint32_t(0x20202020) ) == uint32_t(0x63617474) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x656B && (cur.content[11] | 0x20 ) == 0x72)) {
									cobj.rem_attacker(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							case 0x64:
								// rem_defender
								if((true && (*(uint32_t const*)(&cur.content[5]) | uint32_t(0x20202020) ) == uint32_t(0x6E656665) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6564 && (cur.content[11] | 0x20 ) == 0x72)) {
									cobj.rem_defender(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
								} else {
									err.unhandled_association_key(cur);
								}
								break;
							default:
								err.unhandled_association_key(cur);
								break;
							}
						} else {
							err.unhandled_association_key(cur);
							}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
war_history_file parse_war_history_file(token_generator& gen, error_handler& err, C&& context) {
	war_history_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					enter_war_dated_block(cur.content, gen, err, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// name
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x656D616E))) {
						cobj.name(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
dependencies_list parse_dependencies_list(token_generator& gen, error_handler& err, C&& context) {
	dependencies_list cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			cobj.free_value(parse_text(cur.content, cur.line, err), err, cur.line, context);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
mod_file parse_mod_file(token_generator& gen, error_handler& err, C&& context) {
	mod_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 12:
					// dependencies
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E65646E65706564) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x73656963))) {
						cobj.dependencies(parse_dependencies_list(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6E:
						// name
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D61 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.name(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x70:
						// path
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7461 && (cur.content[3] | 0x20 ) == 0x68)) {
							cobj.path(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 6:
					// extend
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65747865) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x646E)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 7:
					// replace
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6C706572) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6361 && (cur.content[6] | 0x20 ) == 0x65)) {
						cobj.replace_path(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					// user_dir
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7269647F72657375))) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 12:
					// replace_path
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6563616C706572) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x68746170))) {
						cobj.replace_path(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 19:
					// extension_script_ui
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F69736E65747865) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7470697263737F6E) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x757F && (cur.content[18] | 0x20 ) == 0x69)) {
						cobj.extension_script_ui = parse_bool(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
battleplan_option parse_battleplan_option(token_generator& gen, error_handler& err, C&& context) {
	battleplan_option cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 3:
					// red
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x6572 && (cur.content[2] | 0x20 ) == 0x64)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// blue
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x756C && (cur.content[3] | 0x20 ) == 0x65)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6E:
						// name
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D61 && (cur.content[3] | 0x20 ) == 0x65)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x74:
						// type
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7079 && (cur.content[3] | 0x20 ) == 0x65)) {
							/* discarded */
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 5:
					// green
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x65657267) && (cur.content[4] | 0x20 ) == 0x6E)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
battleplan_tool_type parse_battleplan_tool_type(token_generator& gen, error_handler& err, C&& context) {
	battleplan_tool_type cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 6:
					// option
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6974706F) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6E6F)) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// icon
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6369))) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
battleplan_settings_file parse_battleplan_settings_file(token_generator& gen, error_handler& err, C&& context) {
	battleplan_settings_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 10:
					// TOOL_
					// running -  TOOL_
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6C6F6F74) && (cur.content[4] | 0x20 ) == 0x7F)) {
						switch(0x20 | int32_t(cur.content[5])) {
						case 0x61:
							// tool_arrow
							if((true && (*(uint32_t const*)(&cur.content[6]) | uint32_t(0x20202020) ) == uint32_t(0x776F7272))) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x63:
							// tool_color
							if((true && (*(uint32_t const*)(&cur.content[6]) | uint32_t(0x20202020) ) == uint32_t(0x726F6C6F))) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x69:
							// tool_icons
							if((true && (*(uint32_t const*)(&cur.content[6]) | uint32_t(0x20202020) ) == uint32_t(0x736E6F63))) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
						}
					break;
				case 12:
					// tool_borders
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x726F627F6C6F6F74) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x73726564))) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
sfx_definition parse_sfx_definition(token_generator& gen, error_handler& err, C&& context) {
	sfx_definition cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// file
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x656C6966))) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					// volume
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x756C6F76) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x656D)) {
						/* discarded */
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
sfx_file parse_sfx_file(token_generator& gen, error_handler& err, C&& context) {
	sfx_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					// pong
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x676E6F70))) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 5:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// click
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x6B63696C))) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x65:
						// error
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x726F7272))) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x70:
						// peace
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x65636165))) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 6:
					// revolt
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x6F766572) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x746C)) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 8:
					// new_fort
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74726F667F77656E))) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 9:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_move
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65766F6D7F796D72))) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6E:
						// navy_move
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x65766F6D7F797661))) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 10:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						// declarewar
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x61776572616C6365) && (cur.content[9] | 0x20 ) == 0x72)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x73:
						// ST
						// running -  T
						if((true && (cur.content[1] | 0x20 ) == 0x74)) {
							switch(0x20 | int32_t(cur.content[2])) {
							case 0x61:
								// start_game
								if((true && (*(uint32_t const*)(&cur.content[3]) | uint32_t(0x20202020) ) == uint32_t(0x677F7472) && (*(uint16_t const*)(&cur.content[7]) | 0x2020 ) == 0x6D61 && (cur.content[9] | 0x20 ) == 0x65)) {
									gen.discard_group();
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							case 0x65:
								// steam_move
								if((true && (*(uint32_t const*)(&cur.content[3]) | uint32_t(0x20202020) ) == uint32_t(0x6D7F6D61) && (*(uint16_t const*)(&cur.content[7]) | 0x2020 ) == 0x766F && (cur.content[9] | 0x20 ) == 0x65)) {
									gen.discard_group();
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							default:
								err.unhandled_group_key(cur); gen.discard_group();
								break;
							}
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
							}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x6D:
						// major_event
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6576657F726F6A61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x746E)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6E:
						// new_factory
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F746361667F7765) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7972)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// cavalry_move
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F79726C6176) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6576)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x68:
							// chat_message
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x617373656D7F7461) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6567)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x6C:
							// close_window
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x646E69777F65736F) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x776F)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
						break;
					case 0x6E:
						// news_printed
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6972707F737765) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6574 && (cur.content[11] | 0x20 ) == 0x64)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 13:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x61:
						// army_selected
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x656C65737F796D72) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x64657463))) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x63:
						// country_event
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x657F7972746E756F) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x746E6576))) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6C:
						// LAND_COMBAT_
						// running -  AND_COMBAT_
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x626D6F637F646E61) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7461 && (cur.content[11] | 0x20 ) == 0x7F)) {
							switch(0x20 | int32_t(cur.content[12])) {
							case 0x31:
								// land_combat_1
								if((true)) {
									gen.discard_group();
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							case 0x32:
								// land_combat_2
								if((true)) {
									gen.discard_group();
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							case 0x33:
								// land_combat_3
								if((true)) {
									gen.discard_group();
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							case 0x34:
								// land_combat_4
								if((true)) {
									gen.discard_group();
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							case 0x35:
								// land_combat_5
								if((true)) {
									gen.discard_group();
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							case 0x36:
								// land_combat_6
								if((true)) {
									gen.discard_group();
								} else {
									err.unhandled_group_key(cur); gen.discard_group();
								}
								break;
							default:
								err.unhandled_group_key(cur); gen.discard_group();
								break;
							}
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
							}
						break;
					case 0x6E:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// navy_selected
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63656C65737F7976) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x6574 && (cur.content[12] | 0x20 ) == 0x64)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x65:
							// new_land_unit
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x757F646E616C7F77) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x696E && (cur.content[12] | 0x20 ) == 0x74)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 14:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x65:
						// election_event
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6E6F697463656C) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6E657665) && (cur.content[13] | 0x20 ) == 0x74)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6E:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// NAVAL_COMBAT_
							// running -  VAL_COMBAT_
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x626D6F637F6C6176) && (*(uint16_t const*)(&cur.content[10]) | 0x2020 ) == 0x7461 && (cur.content[12] | 0x20 ) == 0x7F)) {
								switch(0x20 | int32_t(cur.content[13])) {
								case 0x31:
									// naval_combat_1
									if((true)) {
										gen.discard_group();
									} else {
										err.unhandled_group_key(cur); gen.discard_group();
									}
									break;
								case 0x32:
									// naval_combat_2
									if((true)) {
										gen.discard_group();
									} else {
										err.unhandled_group_key(cur); gen.discard_group();
									}
									break;
								case 0x33:
									// naval_combat_3
									if((true)) {
										gen.discard_group();
									} else {
										err.unhandled_group_key(cur); gen.discard_group();
									}
									break;
								case 0x34:
									// naval_combat_4
									if((true)) {
										gen.discard_group();
									} else {
										err.unhandled_group_key(cur); gen.discard_group();
									}
									break;
								case 0x35:
									// naval_combat_5
									if((true)) {
										gen.discard_group();
									} else {
										err.unhandled_group_key(cur); gen.discard_group();
									}
									break;
								case 0x36:
									// naval_combat_6
									if((true)) {
										gen.discard_group();
									} else {
										err.unhandled_group_key(cur); gen.discard_group();
									}
									break;
								default:
									err.unhandled_group_key(cur); gen.discard_group();
									break;
								}
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
								}
							break;
						case 0x65:
							// NEW_NAVAL_
							// running -  W_NAVAL_
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F6C6176616E7F77))) {
								switch(0x20 | int32_t(cur.content[10])) {
								case 0x62:
									// new_naval_base
									if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x7361 && (cur.content[13] | 0x20 ) == 0x65)) {
										gen.discard_group();
									} else {
										err.unhandled_group_key(cur); gen.discard_group();
									}
									break;
								case 0x75:
									// new_naval_unit
									if((true && (*(uint16_t const*)(&cur.content[11]) | 0x2020 ) == 0x696E && (cur.content[13] | 0x20 ) == 0x74)) {
										gen.discard_group();
									} else {
										err.unhandled_group_key(cur); gen.discard_group();
									}
									break;
								default:
									err.unhandled_group_key(cur); gen.discard_group();
									break;
								}
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
								}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
						break;
					case 0x70:
						// province_event
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F65636E69766F72) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x6E657665) && (cur.content[13] | 0x20 ) == 0x74)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x73:
						// steam_selected
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6C65737F6D616574) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x65746365) && (cur.content[13] | 0x20 ) == 0x64)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 15:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x65:
							// declarewar_onus
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7261776572616C63) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x756E6F7F) && (cur.content[14] | 0x20 ) == 0x73)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x69:
							// diplomaticoffer
							if((true && (*(uint64_t const*)(&cur.content[2]) | uint64_t(0x2020202020202020) ) == uint64_t(0x636974616D6F6C70) && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x6566666F) && (cur.content[14] | 0x20 ) == 0x72)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
						break;
					case 0x74:
						// tech_discovered
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x637369647F686365) && (*(uint32_t const*)(&cur.content[9]) | uint32_t(0x20202020) ) == uint32_t(0x7265766F) && (*(uint16_t const*)(&cur.content[13]) | 0x2020 ) == 0x6465)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 16:
					// cavalry_selected
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726C61766163) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x64657463656C6573))) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 17:
					// DIPLOMATIC
					// running -  DIPLOMATIC
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x74616D6F6C706964) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x6369)) {
						switch(0x20 | int32_t(cur.content[10])) {
						case 0x66:
							// diplomaticfailure
							if((true && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x756C6961) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x6572)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x73:
							// diplomaticsuccess
							if((true && (*(uint32_t const*)(&cur.content[11]) | uint32_t(0x20202020) ) == uint32_t(0x65636375) && (*(uint16_t const*)(&cur.content[15]) | 0x2020 ) == 0x7373)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
						}
					break;
				case 18:
					// new_infrastructure
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x72666E697F77656E) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7574637572747361) && (*(uint16_t const*)(&cur.content[16]) | 0x2020 ) == 0x6572)) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
bookmark_definition parse_bookmark_definition(token_generator& gen, error_handler& err, C&& context) {
	bookmark_definition cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x64:
						switch(0x20 | int32_t(cur.content[1])) {
						case 0x61:
							// date
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x6574)) {
								cobj.date(assoc_type, parse_date(rh_token.content, rh_token.line, err), err, cur.line, context);
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x65:
							// desc
							if((true && (*(uint16_t const*)(&cur.content[2]) | 0x2020 ) == 0x6373)) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
						break;
					case 0x6E:
						// name
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x6D61 && (cur.content[3] | 0x20 ) == 0x65)) {
							cobj.name(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 7:
					// CAMERA
					// running -  CAMERA
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x656D6163) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x6172)) {
						switch(0x20 | int32_t(cur.content[6])) {
						case 0x78:
							// camerax
							if((true)) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						case 0x79:
							// cameray
							if((true)) {
								/* discarded */
							} else {
								err.unhandled_association_key(cur);
							}
							break;
						default:
							err.unhandled_association_key(cur);
							break;
						}
					} else {
						err.unhandled_association_key(cur);
						}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
bookmark_file parse_bookmark_file(token_generator& gen, error_handler& err, C&& context) {
	bookmark_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 8:
					// bookmark
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6B72616D6B6F6F62))) {
						cobj.bookmark(parse_bookmark_definition(gen, err, context), err, cur.line, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
locale_parser parse_locale_parser(token_generator& gen, error_handler& err, C&& context) {
	locale_parser cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 3:
					// rtl
					if((true && (*(uint16_t const*)(&cur.content[0]) | 0x2020 ) == 0x7472 && (cur.content[2] | 0x20 ) == 0x6C)) {
						cobj.rtl = parse_bool(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 6:
					// script
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x69726373) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x7470)) {
						cobj.script = parse_text(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 8:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x66:
						// fallback
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x626C6C61) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6361 && (cur.content[7] | 0x20 ) == 0x6B)) {
							cobj.fallback = parse_text(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// map_font
						if((true && (*(uint32_t const*)(&cur.content[1]) | uint32_t(0x20202020) ) == uint32_t(0x667F7061) && (*(uint16_t const*)(&cur.content[5]) | 0x2020 ) == 0x6E6F && (cur.content[7] | 0x20 ) == 0x74)) {
							cobj.map_font = parse_text(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 9:
					// body_font
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E6F667F79646F62) && (cur.content[8] | 0x20 ) == 0x74)) {
						cobj.body_font = parse_text(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 11:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x67:
						// gender_mode
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F6D7F7265646E65) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6564)) {
							cobj.gender_mode = parse_uint(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x68:
						// header_font
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6F667F7265646165) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x746E)) {
							cobj.header_font = parse_text(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x6D:
						// map_feature
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x75746165667F7061) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6572)) {
							cobj.map_feature(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 12:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// body_feature
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746165667F79646F) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x7275 && (cur.content[11] | 0x20 ) == 0x65)) {
							cobj.body_feature(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x64:
						// display_name
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E7F79616C707369) && (*(uint16_t const*)(&cur.content[9]) | 0x2020 ) == 0x6D61 && (cur.content[11] | 0x20 ) == 0x65)) {
							cobj.display_name = parse_text(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				case 14:
					// header_feature
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x667F726564616568) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x75746165) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x6572)) {
						cobj.header_feature(assoc_type, parse_text(rh_token.content, rh_token.line, err), err, cur.line, context);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 25:
					// prevent_map_letterspacing
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F746E6576657270) && (*(uint64_t const*)(&cur.content[8]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7474656C7F70616D) && (*(uint64_t const*)(&cur.content[16]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6E69636170737265) && (cur.content[24] | 0x20 ) == 0x67)) {
						cobj.prevent_map_letterspacing = parse_bool(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
province_xy_pair parse_province_xy_pair(token_generator& gen, error_handler& err, C&& context) {
	province_xy_pair cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 1:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x78:
						// x
						if((true)) {
							cobj.x = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					case 0x79:
						// y
						if((true)) {
							cobj.y = parse_float(rh_token.content, rh_token.line, err);
						} else {
							err.unhandled_association_key(cur);
						}
						break;
					default:
						err.unhandled_association_key(cur);
						break;
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
province_position parse_province_position(token_generator& gen, error_handler& err, C&& context) {
	province_position cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				case 4:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x63:
						// city
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x7469 && (cur.content[3] | 0x20 ) == 0x79)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x74:
						// town
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x776F && (cur.content[3] | 0x20 ) == 0x6E)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x75:
						// unit
						if((true && (*(uint16_t const*)(&cur.content[1]) | 0x2020 ) == 0x696E && (cur.content[3] | 0x20 ) == 0x74)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 7:
					// factory
					if((true && (*(uint32_t const*)(&cur.content[0]) | uint32_t(0x20202020) ) == uint32_t(0x74636166) && (*(uint16_t const*)(&cur.content[4]) | 0x2020 ) == 0x726F && (cur.content[6] | 0x20 ) == 0x79)) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 13:
					// text_position
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x736F707F74786574) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6F697469) && (cur.content[12] | 0x20 ) == 0x6E)) {
						cobj.text_position = parse_province_xy_pair(gen, err, context);
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 14:
					// building_nudge
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646C697562) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x64756E7F) && (*(uint16_t const*)(&cur.content[12]) | 0x2020 ) == 0x6567)) {
						gen.discard_group();
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
					}
					break;
				case 17:
					// BUILDING_
					// running -  BUILDING_
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x676E69646C697562) && (cur.content[8] | 0x20 ) == 0x7F)) {
						switch(0x20 | int32_t(cur.content[9])) {
						case 0x70:
							// building_position
							if((true && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x7469736F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6F69 && (cur.content[16] | 0x20 ) == 0x6E)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						case 0x72:
							// building_rotation
							if((true && (*(uint32_t const*)(&cur.content[10]) | uint32_t(0x20202020) ) == uint32_t(0x7461746F) && (*(uint16_t const*)(&cur.content[14]) | 0x2020 ) == 0x6F69 && (cur.content[16] | 0x20 ) == 0x6E)) {
								gen.discard_group();
							} else {
								err.unhandled_group_key(cur); gen.discard_group();
							}
							break;
						default:
							err.unhandled_group_key(cur); gen.discard_group();
							break;
						}
					} else {
						err.unhandled_group_key(cur); gen.discard_group();
						}
					break;
				case 19:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x72:
						// railroad_visibility
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F64616F726C6961) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x696C696269736976) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x7974)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x73:
						// spawn_railway_track
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6961727F6E776170) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6172747F7961776C) && (*(uint16_t const*)(&cur.content[17]) | 0x2020 ) == 0x6B63)) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				case 21:
					switch(0x20 | int32_t(cur.content[0])) {
					case 0x62:
						// building_construction
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F676E69646C6975) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63757274736E6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6974))) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					case 0x6D:
						// military_construction
						if((true && (*(uint64_t const*)(&cur.content[1]) | uint64_t(0x2020202020202020) ) == uint64_t(0x7F79726174696C69) && (*(uint64_t const*)(&cur.content[9]) | uint64_t(0x2020202020202020) ) == uint64_t(0x63757274736E6F63) && (*(uint32_t const*)(&cur.content[17]) | uint32_t(0x20202020) ) == uint32_t(0x6E6F6974))) {
							gen.discard_group();
						} else {
							err.unhandled_group_key(cur); gen.discard_group();
						}
						break;
					default:
						err.unhandled_group_key(cur); gen.discard_group();
						break;
					}
					break;
				default:
					err.unhandled_group_key(cur); gen.discard_group();
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				case 10:
					// text_scale
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x6163737F74786574) && (*(uint16_t const*)(&cur.content[8]) | 0x2020 ) == 0x656C)) {
						cobj.text_scale = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				case 13:
					// text_rotation
					if((true && (*(uint64_t const*)(&cur.content[0]) | uint64_t(0x2020202020202020) ) == uint64_t(0x746F727F74786574) && (*(uint32_t const*)(&cur.content[8]) | uint32_t(0x20202020) ) == uint32_t(0x6F697461) && (cur.content[12] | 0x20 ) == 0x6E)) {
						cobj.text_rotation = parse_float(rh_token.content, rh_token.line, err);
					} else {
						err.unhandled_association_key(cur);
					}
					break;
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
template<typename C>
positions_file parse_positions_file(token_generator& gen, error_handler& err, C&& context) {
	positions_file cobj;
	for(token_and_type cur = gen.get(); cur.type != token_type::unknown && cur.type != token_type::close_brace; cur = gen.get()) {
		if(cur.type == token_type::open_brace) { 
			err.unhandled_free_group(cur); gen.discard_group();
			continue;
		}
		auto peek_result = gen.next();
		if(peek_result.type == token_type::special_identifier) {
			auto peek2_result = gen.next_next();
			if(peek2_result.type == token_type::open_brace) {
				gen.get(); gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					cobj.any_group(cur.content, parse_province_position(gen, err, context), err, cur.line, context);
					break;
				}
			} else {
				auto const assoc_token = gen.get();
				auto const assoc_type = parse_association_type(assoc_token.content, assoc_token.line, err);
				auto const rh_token = gen.get();
				switch(int32_t(cur.content.length())) {
				default:
					err.unhandled_association_key(cur);
					break;
				}
			}
		} else {
			err.unhandled_free_value(cur);
		}
	}
	cobj.finish(context);
	return cobj;
}
}

